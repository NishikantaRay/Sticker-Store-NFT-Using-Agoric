// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/vbank/vbank.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// fee_epoch_duration_blocks is the length of a fee epoch, in blocks.
	// A value of zero has the same meaning as a value of one:
	// the full fee buffer should be distributed immediately.
	FeeEpochDurationBlocks int64 `protobuf:"varint,1,opt,name=fee_epoch_duration_blocks,json=feeEpochDurationBlocks,proto3" json:"fee_epoch_duration_blocks,omitempty" yaml:"fee_epoch_duration_blocks"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e89b3b9e5e671b4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeEpochDurationBlocks() int64 {
	if m != nil {
		return m.FeeEpochDurationBlocks
	}
	return 0
}

type State struct {
	// rewardPool is the current balance of rewards in the module account.
	// NOTE: Tracking manually since there is no bank call for getting a
	// module account balance by name.
	RewardPool github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=reward_pool,json=rewardPool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_pool" yaml:"reward_pool"`
	// reward_rate is the amount of reward, if available, to send to the
	// fee collector module on every block.
	RewardRate github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=reward_rate,json=rewardRate,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_rate" yaml:"reward_rate"`
	// last_sequence is a sequence number for communicating with the VM.
	LastSequence uint64 `protobuf:"varint,3,opt,name=last_sequence,json=lastSequence,proto3" json:"last_sequence,omitempty" yaml:"last_sequence"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e89b3b9e5e671b4, []int{1}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetRewardPool() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardPool
	}
	return nil
}

func (m *State) GetRewardRate() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardRate
	}
	return nil
}

func (m *State) GetLastSequence() uint64 {
	if m != nil {
		return m.LastSequence
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "agoric.vbank.Params")
	proto.RegisterType((*State)(nil), "agoric.vbank.State")
}

func init() { proto.RegisterFile("agoric/vbank/vbank.proto", fileDescriptor_5e89b3b9e5e671b4) }

var fileDescriptor_5e89b3b9e5e671b4 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xbf, 0x6f, 0xaa, 0x50,
	0x14, 0xc7, 0xb9, 0xea, 0x33, 0x2f, 0xe8, 0x5b, 0x88, 0x79, 0x41, 0x07, 0x20, 0xe4, 0x0d, 0x2c,
	0x0f, 0xe2, 0x7b, 0x4b, 0x63, 0xd2, 0xa1, 0xf4, 0xc7, 0x6c, 0x70, 0xeb, 0x42, 0x2e, 0x78, 0x45,
	0x22, 0x70, 0x28, 0xf7, 0x6a, 0xeb, 0xda, 0xbf, 0xa0, 0x63, 0x47, 0xe7, 0xfe, 0x25, 0x8e, 0x4e,
	0x4d, 0x27, 0xda, 0xe8, 0xd2, 0xd9, 0xbf, 0xa0, 0x81, 0x4b, 0x13, 0x3b, 0x74, 0x71, 0x01, 0x0e,
	0x9f, 0x73, 0xe0, 0x73, 0x4f, 0xbe, 0xa2, 0x8c, 0x03, 0xc8, 0x42, 0xdf, 0x5a, 0x78, 0x38, 0x99,
	0xf1, 0xab, 0x99, 0x66, 0xc0, 0x40, 0x6a, 0x73, 0x62, 0x96, 0xef, 0x7a, 0x9d, 0x00, 0x02, 0x28,
	0x81, 0x55, 0x3c, 0xf1, 0x9e, 0x9e, 0xe2, 0x03, 0x8d, 0x81, 0x5a, 0x1e, 0xa6, 0xc4, 0x5a, 0xf4,
	0x3d, 0xc2, 0x70, 0xdf, 0xf2, 0x21, 0x4c, 0x38, 0xd7, 0xa9, 0xd8, 0x1c, 0xe2, 0x0c, 0xc7, 0x54,
	0x72, 0xc5, 0xee, 0x84, 0x10, 0x97, 0xa4, 0xe0, 0x4f, 0xdd, 0xf1, 0x3c, 0xc3, 0x2c, 0x84, 0xc4,
	0xf5, 0x22, 0xf0, 0x67, 0x54, 0x46, 0x1a, 0x32, 0xea, 0xf6, 0x9f, 0x7d, 0xae, 0x6a, 0x4b, 0x1c,
	0x47, 0x03, 0xfd, 0xdb, 0x56, 0xdd, 0xf9, 0x3d, 0x21, 0xe4, 0xb2, 0x40, 0x17, 0x15, 0xb1, 0x4b,
	0x30, 0xf8, 0xf9, 0xb8, 0x52, 0x85, 0xf7, 0x95, 0x8a, 0xf4, 0xe7, 0x9a, 0xf8, 0x63, 0xc4, 0x30,
	0x23, 0xd2, 0x3d, 0x12, 0x5b, 0x19, 0xb9, 0xc5, 0xd9, 0xd8, 0x4d, 0x01, 0x22, 0x19, 0x69, 0x75,
	0xa3, 0xf5, 0xaf, 0x6b, 0x72, 0x6b, 0xb3, 0xb0, 0x36, 0x2b, 0x6b, 0xf3, 0x1c, 0xc2, 0xc4, 0xbe,
	0x5a, 0xe7, 0xaa, 0xb0, 0xcf, 0x55, 0x89, 0x6b, 0x1c, 0xcc, 0xea, 0x4f, 0xaf, 0xaa, 0x11, 0x84,
	0x6c, 0x3a, 0xf7, 0x4c, 0x1f, 0x62, 0xab, 0x3a, 0x38, 0xbf, 0xfd, 0xa5, 0xe3, 0x99, 0xc5, 0x96,
	0x29, 0xa1, 0xe5, 0x67, 0xa8, 0x23, 0xf2, 0xc9, 0x21, 0x40, 0x74, 0x28, 0x91, 0x61, 0x46, 0xe4,
	0xda, 0x71, 0x12, 0xc5, 0xec, 0x51, 0x12, 0x4e, 0xb1, 0x89, 0x53, 0xf1, 0x57, 0x84, 0x29, 0x73,
	0x29, 0xb9, 0x99, 0x93, 0xc4, 0x27, 0x72, 0x5d, 0x43, 0x46, 0xc3, 0x96, 0xf7, 0xb9, 0xda, 0xe1,
	0xbf, 0xf9, 0x82, 0x75, 0xa7, 0x5d, 0xd4, 0xa3, 0xaa, 0x1c, 0x34, 0x8a, 0xc5, 0xda, 0xce, 0x7a,
	0xab, 0xa0, 0xcd, 0x56, 0x41, 0x6f, 0x5b, 0x05, 0x3d, 0xec, 0x14, 0x61, 0xb3, 0x53, 0x84, 0x97,
	0x9d, 0x22, 0x5c, 0x9f, 0x1c, 0x48, 0x9d, 0xf1, 0x40, 0xf1, 0xf4, 0x94, 0x52, 0x01, 0x44, 0x38,
	0x09, 0x3e, 0x6d, 0xef, 0xaa, 0xac, 0x95, 0xaa, 0x5e, 0xb3, 0x0c, 0xca, 0xff, 0x8f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0x80, 0xe3, 0x46, 0x88, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FeeEpochDurationBlocks != that1.FeeEpochDurationBlocks {
		return false
	}
	return true
}
func (this *State) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*State)
	if !ok {
		that2, ok := that.(State)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.RewardPool) != len(that1.RewardPool) {
		return false
	}
	for i := range this.RewardPool {
		if !this.RewardPool[i].Equal(&that1.RewardPool[i]) {
			return false
		}
	}
	if len(this.RewardRate) != len(that1.RewardRate) {
		return false
	}
	for i := range this.RewardRate {
		if !this.RewardRate[i].Equal(&that1.RewardRate[i]) {
			return false
		}
	}
	if this.LastSequence != that1.LastSequence {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeEpochDurationBlocks != 0 {
		i = encodeVarintVbank(dAtA, i, uint64(m.FeeEpochDurationBlocks))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSequence != 0 {
		i = encodeVarintVbank(dAtA, i, uint64(m.LastSequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardRate) > 0 {
		for iNdEx := len(m.RewardRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVbank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RewardPool) > 0 {
		for iNdEx := len(m.RewardPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVbank(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVbank(dAtA []byte, offset int, v uint64) int {
	offset -= sovVbank(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeEpochDurationBlocks != 0 {
		n += 1 + sovVbank(uint64(m.FeeEpochDurationBlocks))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardPool) > 0 {
		for _, e := range m.RewardPool {
			l = e.Size()
			n += 1 + l + sovVbank(uint64(l))
		}
	}
	if len(m.RewardRate) > 0 {
		for _, e := range m.RewardRate {
			l = e.Size()
			n += 1 + l + sovVbank(uint64(l))
		}
	}
	if m.LastSequence != 0 {
		n += 1 + sovVbank(uint64(m.LastSequence))
	}
	return n
}

func sovVbank(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVbank(x uint64) (n int) {
	return sovVbank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVbank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEpochDurationBlocks", wireType)
			}
			m.FeeEpochDurationBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeEpochDurationBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVbank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVbank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVbank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVbank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVbank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVbank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPool = append(m.RewardPool, types.Coin{})
			if err := m.RewardPool[len(m.RewardPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVbank
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVbank
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardRate = append(m.RewardRate, types.Coin{})
			if err := m.RewardRate[len(m.RewardRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSequence", wireType)
			}
			m.LastSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVbank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVbank
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVbank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVbank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVbank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVbank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVbank
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVbank
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVbank
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVbank        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVbank          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVbank = fmt.Errorf("proto: unexpected end of group")
)
