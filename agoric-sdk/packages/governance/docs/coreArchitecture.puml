@startuml coreArchitecture

package Legend <<Rectangle>> #EEEEEE {

    class ContractA {
        constract terms are documented above the line
        --
          accessiblePublicState
        + publicMethod()
        # methodShared()
        - closelyHeldMethod()
    }

    interface InvitationB {
        verifiable invitation fields are above the line
        --
        offerResults - below the line
    }

    note "Contracts have a 'C' marker.\nInvitations have an 'I'.\nblue arrows show verifiable connections.\ncreator-created links are labelled" as NC
}

package "Electorate Vat" <<Rectangle>>  {
    class Electorate {
        terms: committeeSize, committeeName
        --
        Questions[]
        +getQuestionSubscription()
        +getOpenQuestions()
        +getQuestion(questionHandle)
        #getVoterInvitation(): (via some mechanism)
        -getQuestionPoserInvitation()
        -addQuestion(voteCounterInstall, question, details)
    }

    note "produces VoterInvitations.\nPolymorphic over VoteCounters.\nquestions are enumerable." as N1
    Electorate .. N1

    interface QuestionPoserInvitation {
        Electorate
        --
        addQuestion()
    }

    interface VoterInvitation {
        Electorate
        --
        getVoterFacet()
    }

    object VoterFacet {
        ---
        castBallotFor(QuestionoHandle, ...positions)
    }
    note "instances held by\nindividual voters" as NVF
    VoterFacet . NVF

    Electorate --> VoterFacet : creates >
}

object QuestionDetails {
    Method { UNRANKED | ORDER }
    Type { ParamChange | Election | Survey }
    --
    issue, positions, tieOutcome, maxChoices
    quorumRule
    closingRule: { timer, deadline }
    questionHandle
    counterInstance
}

note "QuestionDetails is a widely accessible record.\nverifiable copies are obtained from an Electorate" as N3
QuestionDetails .. N3

package "VoteCounter Vat" <<Rectangle>>  {
    class VoteCounter {
        terms\n   {questionSpec, quorum, closingRule, tieOutcome}
        --
        +getDetails()
        +getOutcome(): Promise
        +getStats()
        +getQuestion()
        #countVotes()
        -submitVote()
        -getCreatorFacet()
    }

    object VoteCap {
        ---
        submitVote(VoterHandle, ...positions)
    }
    note top: VoteCap is passed to and\ntightly held by Electorate.

    note "unaware of voter registration.\n Only Electorate hands out voterFacets" as N2
    VoteCounter .. N2

    VoteCounter --> VoteCap : creates >
}

class ElectionManager {
    Electorate
    addQuestion()
}
note top : ElectionManager is responsible\n  for letting an appropriate\n  party call addQuestion()

ElectionManager -.[#blue]-|> Electorate : verifiable

Electorate *. VoterInvitation
Electorate *. QuestionPoserInvitation
VoterInvitation -> VoterFacet
Electorate -> QuestionDetails : creates >
VoteCounter <|-.[#blue]-|> QuestionDetails : verifiable

VoterFacet --|> VoteCap : encapsulates

@enduml