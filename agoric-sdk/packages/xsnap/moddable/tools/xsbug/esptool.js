/*
 * Copyright (c) 2019-2020 Moddable Tech, Inc.
 *
 *   This file is part of the Moddable SDK Tools.
 *
 *   The Moddable SDK Tools is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   The Moddable SDK Tools is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with the Moddable SDK Tools.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file incorporates work covered by the following copyright and
 * permission notice:
 *
 *      ESP8266 & ESP32 ROM Bootloader Utility
 *      Copyright (C) 2014-2016 Fredrik Ahlberg, Angus Gratton, Espressif Systems (Shanghai) PTE LTD, other contributors as noted.
 *      https://github.com/espressif/esptool
 *
 *      This program is free software; you can redistribute it and/or modify it under
 *      the terms of the GNU General Public License as published by the Free Software
 *      Foundation; either version 2 of the License, or (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful, but WITHOUT
 *      ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *      FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License along with
 *      this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
 *      Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

import Serial from "io/serial";

const Bootloader = Object.freeze({
	SYNC: 0x08,
	WRITE_REG: 0x09,
	READ_REG: 0x0a,
	FLASH_BEGIN: 0x02,
	FLASH_DATA: 0x03,
	FLASH_END: 0x04,
	MEM_BEGIN: 0x05,
	MEM_END: 0x06,
	MEM_DATA: 0x07,
	CHANGE_BAUDRATE: 0x0F,
	FLASH_DEFL_BEGIN: 0x10,
	FLASH_DEFL_DATA: 0x11,
	FLASH_DEFL_END: 0x12,

	// stub only
    ERASE_FLASH: 0xD0,
    ERASE_REGION: 0xD1,
    READ_FLASH: 0xD2,
    RUN_USER_CODE: 0xD3,
});

const baudROM = 115200;
const baudDownload = 921600;

const sizes_esp8266 =  ["512KB", "256KB", "1MB", "2MB", "4MB", "2MB-c1", "4MB-c1", "8MB", "16MB"];
const sizes_esp32 =  ["1MB", "2MB", "4MB", "8MB", "16MB"];
const modes = ["qio", "qout", "dio", "dout"];
const frequencies = ["40m", "26m", "20m", undefined,
						undefined, undefined, undefined, undefined,
						undefined, undefined, undefined, undefined,
						undefined, undefined, undefined, "80m"];

class EspTool {
	#device;
	#serial;
	#readable;
	#loader;
	#mcu;
	#statusSize;
	#baud;
	#reset;
	#baudDownload;
	#serialOptions;
	#flashOptions;
	#writeSpaceAvailable;
	#writable;

	constructor(options) {
		if (!options.device)
			throw new Error("device required");

		this.#device = options.device;

		if ("esp8266" === options.mcu) {
			this.#loader = ESP8266ROM;
			this.#statusSize = 2;
		}
		else if ("esp32" === options.mcu) {
			this.#loader = ESP32ROM;
			this.#statusSize = 4;
		}
		else
			throw new Error("mcu required");
		this.#mcu = options.mcu;

		this.#flashOptions = options.flash || {};

		this.#baud = baudROM;
		this.#serialOptions = options.serial || {};
		this.#reset = (undefined === options.reset) ? true : options.reset;
		this.#baudDownload = this.#serialOptions.baud;
	}
	close() {
		this.#device = undefined;
		if (this.#serial) {
			this.#serial.close();
			this.#serial = undefined;
		}
	}
	async reset() {
		if (!this.#serial)
			await this.buildSerial(this.#baud);

		this.#serial.set({DTR: false, RTS: true});

		this.#serial.purge(true, false);
		await delay(50);

		this.#serial.set({DTR: false, RTS: false});
	}
	async getInfo() {
		const result = {};

		if ("esp8266" == this.#mcu) {
			result.wifi = true;
			result.cores = 1;
			result.bluetooth = false;

			// description
//        	const efuse0 = await this.readRegister(0x3ff0005c);
        	const efuse1 = await this.readRegister(0x3ff00058);
//        	const efuse2 = await this.readRegister(0x3ff00054);
        	const efuse3 = await this.readRegister(0x3ff00050);
        	if ((efuse3 & (1 << 4)) || (efuse1 & (1 << (80 - 64)))) {
        		result.chip = {name: "ESP8285"}
				result.embeddedFlash = true;
			}
			else {
        		result.chip = {name: "ESP8266EX"}
				result.embeddedFlash = false;
			}

			// mac address
			const ESP_OTP_MAC0    = 0x3ff00050;
			const ESP_OTP_MAC1    = 0x3ff00054;
			const ESP_OTP_MAC3    = 0x3ff0005c;
			const mac0 = await this.readRegister(ESP_OTP_MAC0)
			const mac1 = await this.readRegister(ESP_OTP_MAC1)
			const mac3 = await this.readRegister(ESP_OTP_MAC3)

			let oui;
			if (mac3 !== 0)
				oui = [(mac3 >> 16) & 0xff, (mac3 >> 8) & 0xff, mac3 & 0xff];
			else if (((mac1 >> 16) & 0xff) == 0)
				oui = [0x18, 0xfe, 0x34];
			else if (((mac1 >> 16) & 0xff) == 1)
				oui = [0xac, 0xd0, 0x74];
			else
				throw new Error("unexpected value");
			oui.push((mac1 >> 8) & 0xff);
			oui.push(mac1 & 0xff);
			oui.push((mac0 >> 24) & 0xff);
			oui = oui.map(value => value.toString(16).padStart(2, "0"));
			result.MAC = oui.join(":");
		}
		else if ("esp32" === this.#mcu) {
			// chip description
    		const DR_REG_SYSCON_BASE = 0x3ff66000;
			const efuse1 = await this.readEfuse(1);
			const efuse2 = await this.readEfuse(2);
        	const efuse3 = await this.readEfuse(3);
        	const efuse4 = await this.readEfuse(4);
			const efuse5 = await this.readEfuse(5);
			const efuse6 = await this.readEfuse(6);
        	const apb_ctl_date = await this.readRegister(DR_REG_SYSCON_BASE + 0x7C)

			let revision = 0;
			if ((efuse3 >> 15) & 1)	{	// revbit 0
				revision = 1
				if ((efuse5 >> 20) & 1)	// revbit 1
					revision = ((apb_ctl_date >> 31) & 1) ? 3 : 2;		// revbit 2
			}
			result.chip = {
				name: ["ESP32D0WDQ6", "ESP32D0WDQ5", "ESP32D2WDQ5", undefined, undefined, "ESP32-PICO-D4"][(efuse3 >> 9) & 0x07],
				revision,
			};

			// features
			result.wifi = true;
			result.bluetooth = !(efuse3 & (1 << 1));
			result.cores = (efuse3 & (1 << 0)) ? 1 : 2;
			result.embeddedFlash = 0 !== ((efuse3 >> 9) & 0x07);
			result.vRefCalibrationInEFuse = 0 !== ((efuse4 >> 8) & 0x1F);
			result.blk3PartiallyReserved = 0 !== ((efuse4 >> 14) & 1);
			result.codingScheme =  ["None", "3/4", "Repeat (UNSUPPORTED)", undefined, undefined, "Invalid"][efuse6 & 0x3] || "unknown";

			result.mhz = undefined;
			if (efuse3 & (1 << 13))
				result.mhz = (efuse3 & (1 << 12)) ? 160 : 240;

			// MAC
			let mac = [efuse2 >> 8, efuse2, efuse1 >> 24, efuse1 >> 16, efuse1 >> 8, efuse1];
			mac = mac.map(value => (value & 0xFF).toString(16).padStart(2, "0"));
			result.MAC = mac.join(":");
		}

		// SPI parameters (nearly the same for ESP8266 & ESP32)
		const bootloader = await this.read(("esp32" === this.#mcu) ? 0x1000 : 0, 4);
		const spiConfig = new Uint8Array(bootloader);
		if (0xe9 === spiConfig[0]) {
			const sizes = ("esp32" === this.#mcu) ? sizes_esp32 : sizes_esp8266;

			result.flash = {
				mode: modes[spiConfig[2]],
				frequency: frequencies[spiConfig[3] & 0x0F],
				size: sizes[spiConfig[3] >> 4],
			};
		}

		return result;
	}
	async write(options, progress = function() {}) {
		const sizes = ("esp32" === this.#mcu) ? sizes_esp32 : sizes_esp8266;
		const bootloaderOffset = ("esp32" === this.#mcu) ? 0x1000 : 0;
		let offset = options.offset;
		let data = new Uint8Array(options.data);

		if ((undefined === offset) || ("app" === offset))
			offset = ("esp32" === this.#mcu) ? 0x10000 : 0x1000;
		else if ("bootloader" === offset)
			offset = bootloaderOffset;

		if ((offset === bootloaderOffset) && (0xe9 === data[0])) {
			let mode = modes[data[2]];
			let frequency = frequencies[data[3] & 0x0F];
			let size = sizes[data[3] >> 4];
			let update;

			if (this.#flashOptions.mode && (this.#flashOptions.mode !== mode)) {
				mode = this.#flashOptions.mode;
				if (modes.indexOf(mode) < 0)
					throw new Error("invalid flash mode");
				update = true;
			}

			if (this.#flashOptions.frequency && (this.#flashOptions.frequency !== frequency)) {
				frequency = this.#flashOptions.frequency;
				if (frequencies.indexOf(frequency) < 0)
					throw new Error("invalid flash frequency");
				update = true;
			}

			if (this.#flashOptions.size && (this.#flashOptions.size !== size)) {
				size = this.#flashOptions.size;
				if (sizes.indexOf(size) < 0)
					throw new Error("invalid flash size");
				update = true;
			}

			if (update) {
				data = data.slice(0);
				data[2] = modes.indexOf(mode);
				data[3] = frequencies.indexOf(frequency) | (sizes.indexOf(size) << 4);
			}
		}

		await this.downloadToFlash(data, offset, true, progress);
	}
	async restart() {
	//@@ command -- flash end to restart!
		this.#serial.set({DTR: false, RTS: true});

		await delay(50);

		this.#serial.set({DTR: false, RTS: false});
	}
	async erase(offset, size) {
		if ((undefined === offset) && (undefined === size)) {
			await this.command(Bootloader.ERASE_FLASH);
			this.parseReply(await this.getReply(120 * 1000), Bootloader.ERASE_FLASH);
			return;
		}

		if ((offset % 4096) || (size % 4096))
			throw new Error("must be aligned to sectors");

		const payload = new DataView(new ArrayBuffer(2 * 4));
		payload.setUint32(0, offset, 1);
		payload.setUint32(4, size, 1);
		const timeout = Math.max(100, 50 + (size / 1_000_000) * 30_000);		// 30 seconds per MB
		await this.command(Bootloader.ERASE_REGION, new Uint8Array(payload.buffer));
		this.parseReply(await this.getReply(timeout), Bootloader.ERASE_REGION);
	}
	async read(offset, size) {
		const result = new Uint8Array(size);
		let position = 0;
		const limit = 512;		// for WebUSB, no limit is needed. But, Web Serial overflows if this is much bigger.

		while (size) {
			const use = (size > limit) ? limit : size;
			const part = await this.readPart(offset, use);
			result.set(part, position);
			position += use;
			offset += use;
			size -= use;
		}

		return result;
	}
	async readPart(offset, size) {
//		ROM loader is limited to sector boundaries but RAM loader supports arbitrary offsets
//		if ((offset % 4096) || (size % 4096))
//			throw new Error("must be aligned to sectors");

		const payload = new DataView(new ArrayBuffer(4 * 4));
		payload.setUint32(0, offset, 1);
		payload.setUint32(4, size, 1);
		payload.setUint32(8, 4096, 1);
		payload.setUint32(12, 1, 1);		// max-in-flight
		await this.command(Bootloader.READ_FLASH, new Uint8Array(payload.buffer));

		let initial;
		let reply = await this.getReply();
		this.parseReply(reply, Bootloader.READ_FLASH);
		const position = reply.indexOf(0xC0, 1);
		if (position < (reply.length - 1))
			initial = reply.slice(position + 1);

		let result = new Uint8Array;
		let buffered = new Uint8Array;
		let progress = new DataView(new ArrayBuffer(1 * 4));
		while (result.byteLength < size) {
			const data = initial ?? this.#serial.read();
			if (!data) {
				const readPromise = new Promise(resolve => {
					this.#readable = resolve;
				});
				await Promise.race([readPromise, new Promise(resolve => setTimeout(resolve, 100))]);
				continue;
			}

			initial = undefined;
			let t = new Uint8Array(buffered.byteLength + data.byteLength);
			t.set(buffered, 0);
			t.set(new Uint8Array(data), buffered.byteLength);
			buffered = t;

			if (0xC0 !== buffered[0])
				throw new Error("bad data received");
			const end = buffered.indexOf(0xC0, 1);
			if (end < 0)
				continue;

			const slipPacket = this.unescapeSLIP(buffered.slice(0, end + 1));
			if ((size + 2) !== slipPacket.byteLength)
				throw new Error("bad packet size");
			buffered = buffered.slice(end + 1);

			t = new Uint8Array(result.byteLength + slipPacket.byteLength - 2);
			t.set(result, 0);
			t.set(new Uint8Array(slipPacket.buffer, 1, slipPacket.byteLength - 2), result.byteLength);
			result = t;

			progress.setUint32(0, result.byteLength, 1);
			this.writeSLIP(progress.buffer, false);
		}

		// clear trailing MD5 packet -- ignoring for now
		//@@ seems possible that MD5 data gets put into buffered
		const readPromise = new Promise(resolve => {
			this.#readable = resolve;
		});
		let data = await Promise.race([readPromise, new Promise(resolve => setTimeout(resolve, 50))]);
		data = this.unescapeSLIP(new Uint8Array(this.#serial.read()));
//		if ((18 !== data.byteLength) || (0xC0 !== data[0]) || (0xC0 !== data[17]))
//			throw new Error;

		return result;
	}
	async beginProgramming(timeout = 20_000, doFlash = function(){}) {
		const stop = timeout + Date.now();
		let baud = this.#baudDownload ?? 921600;
		let reset = this.#reset;

		for (let pass = 0; pass < 2; pass++) {
			await this.buildSerial(this.#baud);

			const syncPayload = new Uint8Array(4 + 32);
			syncPayload[0] = 0x07;
			syncPayload[1] = 0x07;
			syncPayload[2] = 0x12;
			syncPayload[3] = 0x20;
			for (let i = 0; i < 32; i++)
				syncPayload[i + 4] = 0x55;
			let synced = false;

		syncLoop:
			for (let retry = 0; retry < 5; retry++) {
				if (reset) {
					await doFlash(true);
					this.#serial.set({DTR: false, RTS: true});

					await delay(100);

					this.#serial.set({DTR: true, RTS: false});

					await doFlash(false);

					await delay(50);

					this.#serial.set({DTR: false});
				}

				for (let i = 0; i < 4; i++) {
					if (Date.now() > stop)
						break syncLoop;
					this.#serial.purge();
					this.command(Bootloader.SYNC, syncPayload.buffer);
					const received = await this.getReply();
					if (received && this.parseReply(received, Bootloader.SYNC)) {
						synced = true;
						break syncLoop;
					}
				}
			}
			if (!synced)
				throw new Error("Unable to enter programming mode");

			await this.deployStub(this.#loader);
			console.log("change to baud rate of " + baud);
			await this.changeBaud(baud, this.#baud);

			if (("esp32" !== this.#mcu) || (undefined !== this.#baudDownload))
				break;

			try {
				const DR_REG_SYSCON_BASE = 0x3ff66000;
				await this.readRegister(DR_REG_SYSCON_BASE + 0x7C);
				break;
			}
			catch {
				console.log("no response in programming mode. retry alternate baud.");
				baud = 1500000;
				this.#baud = baudROM;
			}
		}
	}
	/*
		internal functions from here
	*/
	async buildSerial(baud) {
		if (this.#serial) {
			this.#serial.close();
			this.#serial = undefined;
		}

		return new Promise((resolve, reject) => {
			this.#serial = new Serial({
				...this.#serialOptions,
				baud,
				device: this.#device,
				onWritable(count) {
					if (resolve)
						resolve(true);
					resolve = reject = undefined;

					this.flash.#writeSpaceAvailable = count;
					if (this.flash.#writable) {
						this.flash.#writable(true);
						this.flash.#writable = undefined;
					}
				},
				onReadable() {
					if (this.flash.#readable) {
						this.flash.#readable(true);
						this.flash.#readable = undefined;
					}
				},
				onError() {
					if (reject) {
						reject(-1);
						resolve = reject = undefined;
					}
				}
			});
			this.#serial.format = "buffer";
			this.#serial.flash = this;
		});
	}
	async downloadToMemory(data, offset, entry) {
		const byteLength = data.byteLength;
		const ESP_RAM_BLOCK = 6 * 1024;
		let blocks = Math.ceil(byteLength / ESP_RAM_BLOCK);

		let payload = new DataView(new ArrayBuffer(4 * 4));
		payload.setUint32(0, byteLength, true);		// little-endian
		payload.setUint32(4, blocks, true);			// little-endian
		payload.setUint32(8, ESP_RAM_BLOCK, true);	// little-endian
		payload.setUint32(12, offset, true);		// little-endian
		await this.command(Bootloader.MEM_BEGIN, payload.buffer);
		let reply = this.parseReply(await this.getReply(), Bootloader.MEM_BEGIN);

		let block = 0;
		while (blocks--) {
			const fragment = data.slice(block * ESP_RAM_BLOCK, (block + 1) * ESP_RAM_BLOCK);
			const checksum = this.espChecksum(fragment);
			payload = new DataView(new ArrayBuffer((4 * 4) + fragment.length));
			payload.setUint32(0, fragment.length, true);// little-endian
			payload.setUint32(4, block, true);			// little-endian
			payload.setUint32(8, 0, true);				// little-endian
			payload.setUint32(12, 0, true);				// little-endian
			payload = new Uint8Array(payload.buffer);
			payload.set(fragment, 16);
			await this.command(Bootloader.MEM_DATA, payload, checksum);
			reply = this.parseReply(await this.getReply(Math.floor(50 + (fragment.length/(this.#baud / 10) * 1000))), Bootloader.MEM_DATA);
			block += 1;
		}

		if (entry) {
			payload = new DataView(new ArrayBuffer(2 * 4));
			payload.setUint32(0, 0, true);			// little-endian
			payload.setUint32(4, entry, true);		// little-endian

			await this.command(Bootloader.MEM_END, new Uint8Array(payload.buffer));
			reply = await this.getReply(50, true);
			if (!this.parseReply(reply, Bootloader.MEM_END))
				throw new Error("stub download failed");
			let s = "";
			for (let i = 0; i < reply.length; i++)
				s += String.fromCharCode(reply[i]);
			if (s.indexOf("OHAI") < 0)
				throw new Error("Stub loader didn't reply");
		}
	}
	async deployStub(stub) {
		await this.downloadToMemory(stub.text, stub.text_start);
		await this.downloadToMemory(stub.data, stub.data_start, stub.entry);
		this.#statusSize = 2;
	}
	async getReply(timeout = 1000, wait = false) {
		let received;
		const end = Date.now() + timeout;
		while (Date.now() < end) {
			let duration = end - Date.now();
			if (duration <= 0)
				break;
			let data = this.#serial.read();
			if (!data || !data.byteLength) {		//@@ byteLength check should be unnecessary!
				const readPromise = new Promise(resolve => {
					this.#readable = resolve;
				});
				await Promise.race([readPromise, new Promise(resolve => setTimeout(resolve, duration))]);
				continue;
			}

			data = new Uint8Array(data);
			if (!received)
				received = data;
			else {
				const tmp = new Uint8Array(received.length + data.length);
				tmp.set(received);
				tmp.set(data, received.length);
				received = tmp;
			}

			if (!wait && (received.length > 8) && (192 === received[0]) && (192 === received[received.length - 1]))
				break;
		}
		if (received)
			tracePacket(">>", received)
		return received;
	}
	unescapeSLIP(input) {
		let length = 0;

		for (let offset = 0; offset < input.length; offset++) {
			let byte = input[offset];

			if (0xdb === byte) {
				if (0xdd === input[offset + 1]) {
					byte = 0xdb;
					offset += 1;
				}
				else
				if (0xdc === input[offset + 1]) {
					byte = 0xc0;
					offset += 1;
				}
				else
					throw new Error("unexpected SLIP escape");
			}
			input[length++] = byte;
		}
		if (length !== input.byteLength)
			input = input.slice(0, length);

		return input;
	}
	parseReply(input, id) {
		if (!input)
			throw new Error("no reply to command " + id);

		input = this.unescapeSLIP(input);

		// look for 0xc0 and parse
		let offset = 0;
		for (let offset = 0, length = input.length; offset < length; offset++) {
			if (0xc0 !== input[offset])
				continue;

			if (1 !== input[offset + 1])		// direction is 1 for reply
				continue;

			if (id !== input[offset + 2])	// id must match
				continue;

			let size = input[offset + 3] | (input[offset + 4] << 8);
			if (size < this.#statusSize)		// must be big enough to hold status
				continue;
			let value = input[offset + 5] | (input[offset + 6] << 8) | (input[offset + 7] << 16) | (input[offset + 8] << 24)

			if (0xc0 !== input[offset + 9 + size])
				continue;

			let status = input[offset + 9 + size - this.#statusSize];
			if (0 !== status)
				throw new Error(`status error - command ${id} failed`);

			let cmd = {id, size, value};
			if (size > this.#statusSize)
				cmd.data = input.slice(offset + 9, offset + 9 + cmd.size - this.#statusSize);
			return cmd;
		}
	}
	async writeSLIP(payload, purge = true) {
		let escapes = 0;
		payload = new Uint8Array(payload);
		for (let i = 0; i < payload.length; i++) {
			if (0xdb === payload[i])
				escapes += 1;
			if (0xc0 === payload[i])
				escapes += 1;
		}
		let data = new Uint8Array(2 + payload.length + escapes);
		data[0] = 0xc0;
		for (let i = 0, o = 1; i < payload.length; i++) {
			if (0xdb === payload[i]) {
				data[o++] = 0xdb;
				data[o++] = 0xdd;
			}
			else
			if (0xc0 === payload[i]) {
				data[o++] = 0xdb;
				data[o++] = 0xdc;
			}
			else
				data[o++] = payload[i];
		}
		data[data.length - 1] = 0xc0;

		tracePacket("<<", data);
		if (purge)
			this.#serial.purge();

		const buffer = data.buffer;
		if (!this.#writeSpaceAvailable)
			throw new Error("unexpected: not ready to write");

		if (buffer.byteLength <= this.#writeSpaceAvailable) {
			this.#serial.write(buffer);
			this.#writeSpaceAvailable -= buffer.byteLength;
		}
		else {
			let byteOffset = 0, byteLength = buffer.byteLength;

			while (byteOffset < byteLength) {
				const writePromise = new Promise(resolve => {
					 this.#writable = resolve;
				 });

				let count = this.#writeSpaceAvailable;
				if (count > (byteLength - byteOffset))
					count = (byteLength - byteOffset)

				this.#writeSpaceAvailable -= count;
				this.#serial.write(buffer.slice(byteOffset, byteOffset + count));
				byteOffset += count;

				await writePromise;
			}
		}
	}
    async readEfuse(index) {
    	const EFUSE_REG_BASE = 0x6001a000;
        return this.readRegister(EFUSE_REG_BASE + (index << 2));
	}
	async readRegister(address) {
		const payload = new ArrayBuffer(4);
		const view = new DataView(payload);
		view.setUint32(0, address, true);		// little-endian

   	for (let i = 0; i < 3; i++) {
			await this.command(Bootloader.READ_REG, payload);

			let reply = await this.getReply();
			if (!reply)
				continue;

			reply = this.parseReply(reply, Bootloader.READ_REG);
			if (!reply)
				continue;

			return reply.value;
		}

		throw new Error(`readRegister ${address.toString(16)} failed`);
	}
	async changeBaud(baud, previous = 0) {
		const view = new DataView(new ArrayBuffer(8));
		view.setUint32(0, baud, true);		// little-endian
		view.setUint32(4, previous, true);	// little-endian
		await this.command(Bootloader.CHANGE_BAUDRATE, view.buffer);
		if (!this.parseReply(await this.getReply(), Bootloader.CHANGE_BAUDRATE))
			throw new Error("change baud failed");

		await this.buildSerial(baud);
		await new Promise(resolve => setTimeout(resolve, 50));
		this.#baud = baud;
	}
	async downloadToFlash(data, offset, compress = false, progress) {
		const uncompressedByteLength = data.byteLength;
		const FLASH_WRITE_SIZE = 16 * 1024;

		if (compress && globalThis.pako) {
			data = pako.deflate(data, {level: 9});
			console.log(`Compressed image from ${uncompressedByteLength} to ${data.byteLength} bytes.`);
		}

		const cmdOffset = (compress && globalThis.pako) ? (Bootloader.FLASH_DEFL_BEGIN - Bootloader.FLASH_BEGIN) : 0;

		let blocks = Math.ceil(data.byteLength / FLASH_WRITE_SIZE);
		const total = blocks;

		let payload = new DataView(new ArrayBuffer(4 * 4));
		payload.setUint32(0, uncompressedByteLength, true);		// little-endian
		payload.setUint32(4, blocks, true);						// little-endian
		payload.setUint32(8, FLASH_WRITE_SIZE, true);			// little-endian
		payload.setUint32(12, offset, true);					// little-endian
		await this.command(Bootloader.FLASH_BEGIN + cmdOffset, payload.buffer);
		let reply = this.parseReply(await this.getReply(), Bootloader.FLASH_BEGIN + cmdOffset);

		let block = 0;
		while (blocks--) {
			const fragment = data.slice(block * FLASH_WRITE_SIZE, (block + 1) * FLASH_WRITE_SIZE);
			payload = new DataView(new ArrayBuffer((4 * 4) + FLASH_WRITE_SIZE));
			payload.setUint32(0, FLASH_WRITE_SIZE, true);	// little-endian
			payload.setUint32(4, block, true);				// little-endian
			payload.setUint32(8, 0, true);					// little-endian
			payload.setUint32(12, 0, true);					// little-endian

			if (0 === blocks) {		// last block
				if (0 === cmdOffset) {
					payload = new Uint8Array(payload.buffer);
					payload.fill(0xFF, 16, 16 + FLASH_WRITE_SIZE);	// pad uncompressed
				}
				else {
					const byteLength = data.byteLength - (block * FLASH_WRITE_SIZE);
					payload.setUint32(0, byteLength, true);
					payload = new Uint8Array(payload.buffer.slice(0, 16 + byteLength));	// shrink compressed
				}
			}
			else
				payload = new Uint8Array(payload.buffer);
			payload.set(fragment, 16);
			const checksum = this.espChecksum(payload, 16, payload.byteLength);
			await this.command(Bootloader.FLASH_DATA + cmdOffset, payload, checksum);
			reply = this.parseReply(await this.getReply(Math.floor(1000 + (payload.length / (this.#baud / 10) * 1000))), Bootloader.FLASH_DATA + cmdOffset);
			block += 1;
			progress(block / total);
		}

		payload = new DataView(new ArrayBuffer(1 * 4));
		payload.setUint32(0, 1, true);		// little-endian (STAY IN LOADER - DO NOT REBOOT)

		await this.command(Bootloader.FLASH_END + cmdOffset, new Uint8Array(payload.buffer));
		reply = await this.getReply(2000);
		reply = this.parseReply(reply, Bootloader.FLASH_END + cmdOffset);
	}
	espChecksum(data, start = 0, end = data.length) {		// simple checksum used by ESP ROMs on data segments
		let result = 0xef;
		for (let i = start; i < end; i++)
			result ^= data[i];
		return result;
	}
	async command(opcode, payload = new Uint8Array, checksum = 0) {
		const cmd = new Uint8Array(8 + payload.byteLength);
		cmd[0] = 0;		// request
		cmd[1] = opcode;
		cmd[2] = payload.byteLength & 255;
		cmd[3] = (payload.byteLength >> 8) & 255;
		cmd[4] = checksum & 255;
		cmd[5] = (checksum >> 8) & 255;
		cmd[6] = (checksum >> 16) & 255;
		cmd[7] = (checksum >> 24) & 255;
		cmd.set(new Uint8Array(payload), 8);
		this.writeSLIP(cmd.buffer);
	}
}
Object.freeze(EspTool.prototype);

async function delay(ms) {
	await new Promise(resolve => setTimeout(resolve, ms));
}

function tracePacket(prefix, bytes) {
	return;
	for (let i = 0; i < bytes.length; i += 16) {
		let line = prefix;
		let end = i + 16;
		if (end > bytes.length) end = bytes.length;
		for (let j = i; j < end; j++) {
			let byte = bytes[j].toString(16);
			if (byte.length < 2) byte = "0" + byte;
			line += byte + " ";
		}
		line += "   ";
		for (let j = i; j < end; j++) {
			let byte = bytes[j];
			if ((32 <= byte) && (byte < 128))
				line += String.fromCharCode(byte);
			else
				line += ".";
		}
		console.log(line);
	}
};

/*
	These ROM loader images are from esptool.py at

		https://github.com/espressif/esptool/blob/master/esptool.py

	See ESP32ROM.STUB_CODE and ESP8266ROM.STUB_CODE
*/

const ESP8266ROM = {
   text_start: 1074847744,
   data_start: 1073720228,
   entry: 1074847748,
   text: Uint8Array.of(
      0xA8, 0x10, 0x00, 0x40, 0x01, 0xFF, 0xFF, 0x46, 0x45, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFE, 0x3F, 0x4F,
      0x48, 0x41, 0x49, 0xA4, 0xAB, 0xFF, 0x3F, 0x0C, 0xAB, 0xFE, 0x3F, 0x80, 0x80, 0x00, 0x00, 0xE8, 0xF9,
      0x10, 0x40, 0x0C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x00,
      0x00, 0xFF, 0xFF, 0x00, 0x00, 0x8C, 0x80, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
      0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0xFE, 0x3F, 0x9C, 0x2B, 0xFF, 0x3F, 0xA0, 0x2B, 0xFF, 0x3F, 0x10,
      0x27, 0x00, 0x00, 0x14, 0x00, 0x00, 0x60, 0xFF, 0xFF, 0x0F, 0x00, 0xA4, 0xAB, 0xFF, 0x3F, 0xA4, 0xAB,
      0xFF, 0x3F, 0xA4, 0x2B, 0xFF, 0x3F, 0xB4, 0xAB, 0xFF, 0x3F, 0x00, 0x80, 0x00, 0x00, 0x20, 0x29, 0x00,
      0x00, 0xF8, 0x8D, 0xFE, 0x3F, 0x58, 0x80, 0xFE, 0x3F, 0xA8, 0xAB, 0xFF, 0x3F, 0x98, 0xAE, 0xFF, 0x3F,
      0x98, 0x9B, 0xFE, 0x3F, 0x84, 0xAE, 0xFF, 0x3F, 0x80, 0x1B, 0x00, 0x00, 0xA0, 0x0D, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x20, 0x09, 0x00, 0x00, 0x50, 0x0E, 0x00, 0x00, 0x50, 0x12, 0x00, 0x00, 0xAC, 0xAB,
      0xFF, 0x3F, 0xB0, 0xAB, 0xFF, 0x3F, 0x1F, 0x29, 0x00, 0x00, 0x3C, 0xA9, 0xFE, 0x3F, 0x08, 0xAE, 0xFF,
      0x3F, 0x8C, 0xAD, 0xFF, 0x3F, 0x80, 0x0B, 0x00, 0x00, 0x0C, 0xAD, 0xFF, 0x3F, 0x8C, 0xAC, 0xFF, 0x3F,
      0xB0, 0x15, 0x00, 0x00, 0xF1, 0xFF, 0x00, 0x00, 0x00, 0xAB, 0xFE, 0x3F, 0x00, 0xA9, 0xFE, 0x3F, 0xBC,
      0x0F, 0x00, 0x40, 0x88, 0x0F, 0x00, 0x40, 0xA8, 0x0F, 0x00, 0x40, 0x58, 0x3F, 0x00, 0x40, 0x2C, 0x4C,
      0x00, 0x40, 0x30, 0x3B, 0x00, 0x40, 0x78, 0x48, 0x00, 0x40, 0x00, 0x4A, 0x00, 0x40, 0xB4, 0x49, 0x00,
      0x40, 0xCC, 0x2E, 0x00, 0x40, 0x1C, 0xE2, 0x00, 0x40, 0xD8, 0x39, 0x00, 0x40, 0x68, 0xE2, 0x00, 0x40,
      0x48, 0xDF, 0x00, 0x40, 0x90, 0xE1, 0x00, 0x40, 0x4C, 0x26, 0x00, 0x40, 0x84, 0x49, 0x00, 0x40, 0x21,
      0xBC, 0xFF, 0x92, 0xA1, 0x10, 0x90, 0x11, 0xC0, 0x22, 0x61, 0x23, 0x22, 0xA0, 0x00, 0x02, 0x61, 0x43,
      0xC2, 0x61, 0x42, 0xD2, 0x61, 0x41, 0xE2, 0x61, 0x40, 0xF2, 0x61, 0x3F, 0x01, 0xE7, 0xFF, 0xC0, 0x00,
      0x00, 0x21, 0xB2, 0xFF, 0x31, 0xB3, 0xFF, 0x0C, 0x04, 0x06, 0x01, 0x00, 0x00, 0x49, 0x02, 0x4B, 0x22,
      0x37, 0x32, 0xF8, 0x22, 0xA0, 0x8C, 0x2A, 0x21, 0x0C, 0x43, 0x45, 0xB3, 0x01, 0x21, 0xAE, 0xFF, 0xC1,
      0xAD, 0xFF, 0x31, 0xAE, 0xFF, 0x2A, 0x2C, 0xC0, 0x20, 0x00, 0xC9, 0x02, 0x42, 0xA0, 0x00, 0x22, 0xA0,
      0x05, 0x01, 0xDA, 0xFF, 0xC0, 0x00, 0x00, 0x21, 0xA9, 0xFF, 0x32, 0xA1, 0x01, 0xC0, 0x20, 0x00, 0x48,
      0x02, 0x30, 0x34, 0x20, 0xC0, 0x20, 0x00, 0x39, 0x02, 0x2C, 0x02, 0x01, 0xD4, 0xFF, 0xC0, 0x00, 0x00,
      0x01, 0xD4, 0xFF, 0xC0, 0x00, 0x00, 0x31, 0xA2, 0xFF, 0x41, 0xA2, 0xFF, 0x51, 0xA3, 0xFF, 0x71, 0xA3,
      0xFF, 0x0C, 0x02, 0x62, 0xA1, 0x00, 0x01, 0xCF, 0xFF, 0xC0, 0x00, 0x00, 0x21, 0xA0, 0xFF, 0x31, 0x98,
      0xFF, 0x2A, 0x23, 0xC0, 0x20, 0x00, 0x38, 0x02, 0x16, 0x73, 0xFF, 0xC0, 0x20, 0x00, 0xC8, 0x02, 0x0C,
      0x03, 0xC0, 0x20, 0x00, 0x39, 0x02, 0x0C, 0x12, 0x22, 0x41, 0x84, 0x22, 0x0C, 0x01, 0x0C, 0x24, 0x22,
      0x41, 0x85, 0x42, 0x51, 0x43, 0x32, 0x61, 0x22, 0x26, 0x92, 0x08, 0x1C, 0x33, 0x37, 0x12, 0x1F, 0x86,
      0x08, 0x00, 0x00, 0x22, 0x0C, 0x03, 0x32, 0x0C, 0x02, 0x80, 0x22, 0x11, 0x30, 0x22, 0x20, 0x66, 0x42,
      0x12, 0x28, 0x2C, 0xC0, 0x20, 0x00, 0x28, 0x02, 0x22, 0x61, 0x22, 0x46, 0x01, 0x00, 0x22, 0xA0, 0x12,
      0x22, 0x51, 0x43, 0x22, 0xA0, 0xC0, 0x01, 0xB6, 0xFF, 0xC0, 0x00, 0x00, 0x22, 0xA0, 0x84, 0x10, 0x22,
      0x80, 0x32, 0xA0, 0x08, 0x45, 0xA4, 0x01, 0xF2, 0x0C, 0x03, 0x22, 0x0C, 0x02, 0x80, 0xFF, 0x11, 0x20,
      0xFF, 0x20, 0x21, 0x82, 0xFF, 0xF7, 0xB2, 0x17, 0x05, 0x9E, 0x01, 0x22, 0xA0, 0xEE, 0x01, 0xAC, 0xFF,
      0xC0, 0x00, 0x00, 0x22, 0xA0, 0xC0, 0x01, 0xAA, 0xFF, 0xC0, 0x00, 0x00, 0xC6, 0xD8, 0xFF, 0x32, 0x0C,
      0x01, 0x0C, 0xD2, 0x27, 0x93, 0x02, 0xC6, 0x85, 0x00, 0x37, 0x32, 0x51, 0x66, 0x63, 0x02, 0x86, 0x9E,
      0x00, 0xF6, 0x73, 0x23, 0x66, 0x33, 0x02, 0x46, 0x5D, 0x00, 0xF6, 0x43, 0x0A, 0x66, 0x23, 0x02, 0x86,
      0x4C, 0x00, 0x06, 0x9D, 0x00, 0x00, 0x00, 0x66, 0x43, 0x02, 0x46, 0x71, 0x00, 0x66, 0x53, 0x02, 0xC6,
      0x83, 0x00, 0xC6, 0x98, 0x00, 0x00, 0x0C, 0x92, 0x27, 0x93, 0x02, 0x06, 0x7A, 0x00, 0x37, 0x32, 0x08,
      0x66, 0x73, 0x02, 0xC6, 0x80, 0x00, 0x86, 0x93, 0x00, 0x66, 0x93, 0x02, 0x46, 0x78, 0x00, 0x0C, 0xB2,
      0x27, 0x93, 0x02, 0x46, 0x6D, 0x00, 0x46, 0x8F, 0x00, 0x1C, 0x32, 0x27, 0x93, 0x02, 0xC6, 0x39, 0x00,
      0x37, 0x32, 0x28, 0x66, 0xB3, 0x02, 0x86, 0x40, 0x00, 0x1C, 0x02, 0x37, 0x32, 0x0A, 0x0C, 0xF2, 0x27,
      0x93, 0x02, 0x06, 0x2E, 0x00, 0x06, 0x87, 0x00, 0x1C, 0x12, 0x27, 0x93, 0x02, 0x46, 0x42, 0x00, 0x1C,
      0x22, 0x27, 0x93, 0x02, 0x46, 0x59, 0x00, 0x46, 0x82, 0x00, 0x22, 0xA0, 0xD1, 0x27, 0x13, 0x2C, 0x37,
      0x32, 0x09, 0x22, 0xA0, 0xD0, 0x27, 0x13, 0x18, 0xC6, 0x7D, 0x00, 0x00, 0x22, 0xA0, 0xD2, 0x27, 0x93,
      0x02, 0x86, 0x25, 0x00, 0x22, 0xA0, 0xD3, 0x27, 0x93, 0x02, 0x86, 0x96, 0x05, 0x46, 0x78, 0x00, 0x0C,
      0x1D, 0xCC, 0x1F, 0x86, 0x60, 0x05, 0x06, 0x74, 0x00, 0x00, 0x66, 0x8F, 0x02, 0x46, 0x61, 0x05, 0x06,
      0x71, 0x00, 0x00, 0x01, 0x74, 0xFF, 0xC0, 0x00, 0x00, 0xEA, 0xED, 0x9C, 0x12, 0x86, 0x6D, 0x00, 0x00,
      0x20, 0x2C, 0x41, 0x01, 0x71, 0xFF, 0xC0, 0x00, 0x00, 0x56, 0x92, 0x1A, 0xD2, 0xDD, 0xF0, 0xD0, 0x2E,
      0xC0, 0x8C, 0x4D, 0x20, 0x30, 0xF4, 0x56, 0x53, 0xFE, 0xDA, 0xF2, 0xE1, 0x38, 0xFF, 0x06, 0x04, 0x00,
      0x00, 0x00, 0x20, 0x20, 0xF5, 0x01, 0x69, 0xFF, 0xC0, 0x00, 0x00, 0x56, 0x52, 0x18, 0xE0, 0xDD, 0xC0,
      0xD0, 0x2F, 0xC0, 0xD7, 0x3E, 0xEA, 0xDA, 0xE2, 0x06, 0x04, 0x00, 0x00, 0x00, 0x20, 0x2C, 0x41, 0x01,
      0x61, 0xFF, 0xC0, 0x00, 0x00, 0x56, 0x92, 0x16, 0xD2, 0xDD, 0xF0, 0xD0, 0x2E, 0xC0, 0x56, 0xAD, 0xFE,
      0xC6, 0x57, 0x00, 0x0C, 0x0E, 0xD2, 0xA0, 0xC0, 0x26, 0x8F, 0x02, 0x46, 0x58, 0x00, 0x86, 0x66, 0x05,
      0x00, 0x00, 0x66, 0xBF, 0x02, 0x86, 0x64, 0x05, 0x06, 0x3B, 0x00, 0x66, 0xBF, 0x02, 0x86, 0x43, 0x05,
      0xC6, 0x4E, 0x00, 0x0C, 0x1D, 0x26, 0xBF, 0x02, 0x46, 0x4D, 0x00, 0x38, 0x4C, 0x21, 0x24, 0xFF, 0x0C,
      0x0E, 0xD2, 0xA0, 0xC2, 0x27, 0x13, 0x02, 0x86, 0x4C, 0x00, 0x46, 0x3F, 0x05, 0x0C, 0x14, 0x66, 0xBF,
      0x12, 0x38, 0x4C, 0x21, 0x1E, 0xFF, 0x0C, 0x0E, 0xD2, 0xA0, 0xC2, 0x27, 0x13, 0x02, 0x86, 0x46, 0x00,
      0xC6, 0x3E, 0x05, 0xDD, 0x04, 0x46, 0x41, 0x00, 0x00, 0x00, 0x21, 0x19, 0xFF, 0x0C, 0x0E, 0x32, 0x02,
      0x00, 0xD2, 0xA0, 0xC6, 0xE7, 0x93, 0x02, 0xC6, 0x3F, 0x00, 0x38, 0x2C, 0xD8, 0x52, 0xF2, 0xCF, 0xF0,
      0xF0, 0x33, 0xC0, 0x22, 0xA0, 0xC0, 0x30, 0xD2, 0x93, 0x32, 0xCC, 0x18, 0x22, 0xA0, 0xEF, 0x46, 0x02,
      0x00, 0xEA, 0x43, 0x42, 0x04, 0x00, 0x1B, 0xEE, 0x40, 0x22, 0x30, 0xF7, 0x2E, 0xF2, 0x52, 0x0C, 0x05,
      0x62, 0x0C, 0x04, 0x42, 0x0C, 0x06, 0x80, 0x55, 0x11, 0x32, 0x0C, 0x07, 0x60, 0x55, 0x20, 0x00, 0x44,
      0x11, 0x50, 0x44, 0x20, 0x80, 0x33, 0x01, 0x40, 0x33, 0x20, 0x30, 0x22, 0xC0, 0x32, 0xA0, 0xC1, 0x0C,
      0x0E, 0x20, 0xD3, 0x93, 0x46, 0x2B, 0x00, 0x00, 0x21, 0x00, 0xFF, 0xD2, 0xA0, 0xC6, 0x32, 0x02, 0x00,
      0x16, 0x33, 0x09, 0x38, 0x32, 0xD2, 0xA0, 0xC8, 0x56, 0xB3, 0x08, 0x32, 0x42, 0x00, 0xD8, 0x52, 0xC6,
      0x20, 0x00, 0x1C, 0x82, 0x27, 0x9F, 0x02, 0x46, 0x24, 0x05, 0x0C, 0x0E, 0x0C, 0x1D, 0x46, 0x20, 0x00,
      0x00, 0x66, 0x4F, 0x02, 0x46, 0x28, 0x05, 0x06, 0x1A, 0x00, 0x66, 0xBF, 0x02, 0x06, 0x29, 0x05, 0xC6,
      0x01, 0x00, 0x00, 0x00, 0x66, 0x4F, 0x02, 0x86, 0x28, 0x05, 0x0C, 0x0E, 0xD2, 0xA0, 0xC0, 0x86, 0x17,
      0x00, 0x00, 0x00, 0x66, 0xBF, 0x02, 0x46, 0x26, 0x05, 0x06, 0x11, 0x00, 0x41, 0xEA, 0xFE, 0xF2, 0xCF,
      0xF0, 0x78, 0x04, 0xCC, 0x37, 0xD2, 0xA0, 0xC6, 0xFC, 0x6F, 0x31, 0xE8, 0xFE, 0xD2, 0xA0, 0xC9, 0x68,
      0x03, 0xF7, 0x36, 0x2C, 0xF0, 0x20, 0x14, 0xD2, 0xA0, 0xC0, 0x92, 0xCC, 0x18, 0x8C, 0x92, 0x86, 0x07,
      0x00, 0x2A, 0x89, 0x88, 0x08, 0x4B, 0x22, 0x89, 0x05, 0x2A, 0x57, 0x20, 0x86, 0xC0, 0xF7, 0x32, 0xEF,
      0x59, 0x04, 0x89, 0x03, 0x46, 0x10, 0x05, 0x66, 0x8F, 0x02, 0x86, 0x18, 0x05, 0x0C, 0x1D, 0x0C, 0x0E,
      0xC6, 0x01, 0x00, 0x00, 0x00, 0xE2, 0xA0, 0x00, 0xD2, 0xA0, 0xFF, 0xD0, 0x20, 0x74, 0x05, 0x74, 0x01,
      0xE0, 0x20, 0x74, 0xC5, 0x73, 0x01, 0x22, 0xA0, 0xC0, 0x01, 0xFB, 0xFE, 0xC0, 0x00, 0x00, 0x56, 0x7D,
      0xCA, 0x22, 0x0C, 0x01, 0x32, 0xA0, 0x0F, 0x37, 0x12, 0x31, 0x27, 0x33, 0x14, 0x66, 0x42, 0x02, 0x06,
      0xD2, 0x04, 0x66, 0x62, 0x02, 0xC6, 0xD6, 0x04, 0x26, 0x32, 0x02, 0x46, 0x22, 0xFF, 0x46, 0x1A, 0x00,
      0x1C, 0x23, 0x37, 0x92, 0x02, 0x46, 0xCC, 0x04, 0x32, 0xA0, 0xD2, 0x37, 0x12, 0x49, 0x1C, 0x13, 0x37,
      0x12, 0x02, 0x06, 0x1C, 0xFF, 0xC6, 0x1A, 0x00, 0x00, 0x21, 0xC3, 0xFE, 0x01, 0xED, 0xFE, 0xC0, 0x00,
      0x00, 0x21, 0xC1, 0xFE, 0xC0, 0x20, 0x00, 0x38, 0x02, 0x21, 0xC0, 0xFE, 0x20, 0x33, 0x10, 0x22, 0x2C,
      0x03, 0x20, 0x23, 0x82, 0x32, 0x2C, 0x02, 0x01, 0xE7, 0xFE, 0xC0, 0x00, 0x00, 0x3D, 0x02, 0x2D, 0x0D,
      0x01, 0xE5, 0xFE, 0xC0, 0x00, 0x00, 0x22, 0xA3, 0xE8, 0x01, 0xE1, 0xFE, 0xC0, 0x00, 0x00, 0x06, 0x0C,
      0xFF, 0x00, 0x00, 0x22, 0x2C, 0x02, 0x32, 0x2C, 0x03, 0x42, 0x2C, 0x04, 0x58, 0x5C, 0x85, 0x76, 0x01,
      0x46, 0x07, 0xFF, 0x00, 0x32, 0x0C, 0x03, 0x22, 0x0C, 0x02, 0x80, 0x33, 0x11, 0x20, 0x33, 0x20, 0x32,
      0xC3, 0xF0, 0x22, 0xCC, 0x18, 0x45, 0x5B, 0x01, 0x06, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x22, 0x0C, 0x03,
      0x32, 0x0C, 0x02, 0x80, 0x22, 0x11, 0x30, 0x22, 0x20, 0x22, 0xC2, 0xF0, 0xF2, 0xCC, 0x18, 0x22, 0x61,
      0x2B, 0x0C, 0x1E, 0x86, 0x95, 0x04, 0x21, 0xA4, 0xFE, 0x41, 0xC1, 0xFE, 0xB2, 0x22, 0x00, 0xD1, 0xA3,
      0xFE, 0x62, 0xA0, 0x03, 0x22, 0x24, 0x02, 0x72, 0x21, 0x2B, 0x62, 0x61, 0x25, 0xB0, 0xDD, 0xC0, 0x27,
      0x37, 0x04, 0x0C, 0x18, 0x82, 0x61, 0x25, 0xB2, 0x61, 0x35, 0x05, 0x4D, 0x01, 0xB2, 0x21, 0x35, 0x71,
      0x9B, 0xFE, 0x92, 0x21, 0x2B, 0x70, 0x4B, 0xC0, 0xDA, 0x44, 0x0B, 0x84, 0xDA, 0x6B, 0x62, 0x61, 0x29,
      0x82, 0x61, 0x2C, 0x40, 0x58, 0x10, 0x9A, 0xAF, 0x8C, 0x15, 0x46, 0x6E, 0x04, 0x77, 0xBB, 0x02, 0xC6,
      0x6E, 0x04, 0x98, 0xEC, 0x72, 0x2C, 0x10, 0x82, 0x2C, 0x15, 0x28, 0x6C, 0x92, 0x61, 0x26, 0x72, 0x61,
      0x24, 0x82, 0x61, 0x2A, 0x3C, 0x53, 0xD8, 0x7C, 0xE2, 0x2C, 0x14, 0x68, 0xFC, 0x27, 0xB3, 0x02, 0x06,
      0x1B, 0x04, 0x31, 0x8B, 0xFE, 0x30, 0x22, 0xA0, 0x28, 0x02, 0xA0, 0x02, 0x00, 0x21, 0x7F, 0xFE, 0x0C,
      0x0E, 0x0C, 0x13, 0xE9, 0x92, 0xE9, 0x82, 0x39, 0xD2, 0x39, 0xA2, 0xA7, 0x3F, 0x3A, 0xE2, 0x61, 0x24,
      0x6D, 0x0E, 0xE2, 0x61, 0x26, 0xE0, 0xDE, 0x20, 0x92, 0x21, 0x25, 0x0C, 0x23, 0x30, 0x39, 0x10, 0x21,
      0x76, 0xFE, 0x9C, 0x93, 0x0C, 0x14, 0x49, 0x62, 0x5D, 0x0B, 0xCD, 0x0F, 0x86, 0x0C, 0x04, 0xA7, 0xBF,
      0xE4, 0x32, 0x0F, 0x00, 0x21, 0x70, 0xFE, 0x1B, 0xCF, 0x39, 0x82, 0x06, 0x06, 0x00, 0x39, 0x82, 0xCD,
      0x0F, 0x46, 0x04, 0x00, 0x00, 0x32, 0x0F, 0x00, 0x1B, 0xCF, 0x39, 0x82, 0xE2, 0x61, 0x24, 0x6D, 0x0E,
      0xE2, 0x61, 0x26, 0xDD, 0x0E, 0xA7, 0x3C, 0x2C, 0x86, 0x00, 0x00, 0x00, 0xCD, 0x0F, 0x72, 0x21, 0x25,
      0x0C, 0x25, 0x50, 0x37, 0x10, 0x21, 0x63, 0xFE, 0x9C, 0x03, 0x59, 0x62, 0x5D, 0x0B, 0xC6, 0x2E, 0x00,
      0xA7, 0xBF, 0xE6, 0x32, 0x0F, 0x00, 0x21, 0x5F, 0xFE, 0x1B, 0xCF, 0x39, 0x92, 0x06, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x32, 0x0C, 0x00, 0x21, 0x5B, 0xFE, 0x1B, 0xCC, 0x39, 0x92, 0x21, 0x59, 0xFE, 0x1C, 0xF3,
      0x58, 0x82, 0x68, 0x92, 0x80, 0x25, 0x11, 0x6A, 0x22, 0x42, 0x61, 0x30, 0x52, 0x61, 0x34, 0x62, 0x61,
      0x2F, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x01, 0x83, 0xFE, 0xC0, 0x00, 0x00, 0x0C, 0x13, 0x42, 0x21,
      0x30, 0x52, 0x21, 0x34, 0x62, 0x21, 0x2F, 0xA2, 0x21, 0x33, 0xB2, 0x21, 0x35, 0xCC, 0xE2, 0x2C, 0x02,
      0x20, 0x66, 0x10, 0xCC, 0x76, 0x50, 0x20, 0x34, 0x22, 0xC2, 0xF8, 0x20, 0x36, 0x83, 0x50, 0x54, 0x41,
      0x8B, 0x55, 0x0C, 0x12, 0x71, 0x50, 0xFE, 0x00, 0x15, 0x40, 0x00, 0x62, 0xA1, 0x67, 0x37, 0x0F, 0x00,
      0x05, 0x40, 0x40, 0x40, 0x91, 0x0C, 0x06, 0x40, 0x62, 0x83, 0x30, 0x66, 0x20, 0x9C, 0x46, 0x0C, 0x16,
      0x46, 0x00, 0x00, 0xCD, 0x0F, 0x21, 0x3D, 0xFE, 0x2C, 0x43, 0x39, 0x62, 0x5D, 0x0B, 0x46, 0xD4, 0x03,
      0x00, 0x00, 0x00, 0x5D, 0x0B, 0xF6, 0x3D, 0x3F, 0xA7, 0x3C, 0x29, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD,
      0x0F, 0x82, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x28, 0x10, 0x9C, 0xC2, 0x0C, 0x33, 0x21, 0x32, 0xFE, 0x39,
      0x62, 0x0C, 0x14, 0xC6, 0xCA, 0x03, 0xA7, 0xBF, 0xE2, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06,
      0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B,
      0xDD, 0x06, 0xEF, 0xFF, 0x71, 0x28, 0xFE, 0xE0, 0x20, 0x24, 0x29, 0xB7, 0x20, 0x21, 0x41, 0x29, 0xC7,
      0xE0, 0xE3, 0x41, 0xD2, 0xCD, 0xFD, 0x56, 0x22, 0x23, 0xD0, 0x20, 0x24, 0x27, 0xBD, 0x3C, 0xA7, 0x3C,
      0x25, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x92, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x29, 0x10, 0x0C,
      0x53, 0x56, 0x22, 0xFA, 0xC6, 0x04, 0x00, 0x00, 0x00, 0xA7, 0xBF, 0xE6, 0x1B, 0xCF, 0x22, 0x0F, 0x00,
      0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20,
      0xEE, 0x20, 0x8B, 0xDD, 0x46, 0xEF, 0xFF, 0x00, 0xD0, 0x20, 0x24, 0x00, 0x02, 0x40, 0xE0, 0xE0, 0x91,
      0x7C, 0x82, 0x20, 0xDD, 0x10, 0x0C, 0x06, 0x16, 0x4D, 0x05, 0xF6, 0x8D, 0x39, 0xA7, 0x3C, 0x23, 0xC6,
      0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x27, 0x10, 0x0C, 0x63, 0x56,
      0xF2, 0xF4, 0x46, 0x04, 0x00, 0xA7, 0xBF, 0xE8, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01,
      0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD,
      0x86, 0xF0, 0xFF, 0x21, 0xFE, 0xFD, 0x31, 0x08, 0xFE, 0x6A, 0x22, 0x3A, 0x22, 0xE2, 0x42, 0x18, 0xD2,
      0xCD, 0xF8, 0xE0, 0xE8, 0x41, 0x06, 0x16, 0x00, 0x00, 0x00, 0xA7, 0x3C, 0x41, 0xC6, 0x00, 0x00, 0x5D,
      0x0B, 0xCD, 0x0F, 0x82, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x28, 0x10, 0x31, 0xF3, 0xFD, 0x9C, 0xF2, 0x0C,
      0x72, 0x29, 0x63, 0xC6, 0xBE, 0xFF, 0xA7, 0xBF, 0xE4, 0x21, 0xEF, 0xFD, 0x41, 0xFA, 0xFD, 0x32, 0x0F,
      0x00, 0x6A, 0x22, 0x4A, 0x22, 0x1B, 0xCF, 0x32, 0x42, 0x18, 0x5D, 0x0B, 0x86, 0x07, 0x00, 0x41, 0xF5,
      0xFD, 0x6A, 0x33, 0x4A, 0x33, 0x22, 0x43, 0x18, 0x46, 0x04, 0x00, 0x21, 0xE6, 0xFD, 0x41, 0xF1, 0xFD,
      0x32, 0x0C, 0x00, 0x6A, 0x22, 0x4A, 0x22, 0x32, 0x42, 0x18, 0x1B, 0xCC, 0x1B, 0x66, 0xF6, 0x46, 0x02,
      0x06, 0xD2, 0xFF, 0x91, 0x04, 0xFE, 0x62, 0x09, 0x39, 0x22, 0x09, 0x38, 0x80, 0x66, 0x11, 0x20, 0x66,
      0x20, 0x22, 0x09, 0x3B, 0x32, 0x09, 0x3A, 0x80, 0x22, 0x11, 0x30, 0x22, 0x20, 0x31, 0xD4, 0xFD, 0x30,
      0x22, 0x30, 0x27, 0x96, 0x06, 0x86, 0x1C, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x2C, 0x73, 0x46, 0xE2, 0x00,
      0x00, 0xF6, 0x8D, 0x3C, 0xA7, 0x3C, 0x25, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25,
      0x0C, 0x22, 0x20, 0x27, 0x10, 0x3C, 0x33, 0x56, 0xA2, 0xE6, 0xC6, 0x04, 0x00, 0x00, 0x00, 0xA7, 0xBF,
      0xE6, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00,
      0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD, 0x06, 0xF0, 0xFF, 0x00, 0xE0, 0x80, 0x74,
      0x82, 0x61, 0x26, 0xE0, 0xE8, 0x41, 0xD2, 0xCD, 0xF8, 0x46, 0x02, 0x00, 0x00, 0x3C, 0x43, 0x46, 0xF7,
      0x02, 0x5D, 0x0B, 0xCD, 0x0F, 0x92, 0x21, 0x29, 0x97, 0xB5, 0xF0, 0x72, 0x21, 0x26, 0x0B, 0x66, 0x72,
      0x45, 0x00, 0x1B, 0x55, 0x0C, 0x02, 0x0C, 0x13, 0x4D, 0x02, 0xD0, 0x43, 0x93, 0x60, 0x23, 0x93, 0x27,
      0x84, 0x87, 0x86, 0x1D, 0x00, 0x0C, 0x93, 0x86, 0xEC, 0x02, 0x5D, 0x0B, 0xCD, 0x0F, 0x82, 0x21, 0x29,
      0x87, 0xB5, 0xF0, 0x46, 0x07, 0x00, 0x92, 0x21, 0x25, 0x0C, 0x22, 0x2C, 0x63, 0x27, 0x09, 0x02, 0x86,
      0x7A, 0xFF, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x2C, 0x83, 0x86, 0xB8, 0x00, 0x00, 0x5D, 0x0B,
      0xCD, 0x0F, 0xA7, 0xBC, 0xDE, 0x72, 0x21, 0x29, 0x50, 0x27, 0xC0, 0xC0, 0x7A, 0xC0, 0x77, 0xB2, 0x01,
      0x7D, 0x02, 0x77, 0xB6, 0x01, 0x7D, 0x06, 0x2D, 0x05, 0x3D, 0x0C, 0x4D, 0x07, 0x52, 0x61, 0x34, 0x62,
      0x61, 0x2F, 0x72, 0x61, 0x32, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x01, 0xD0, 0xFD, 0xC0, 0x00, 0x00,
      0x72, 0x21, 0x32, 0x52, 0x21, 0x34, 0x62, 0x21, 0x2F, 0xB2, 0x21, 0x35, 0xA2, 0x21, 0x33, 0x7A, 0xCC,
      0x7A, 0x55, 0x70, 0x66, 0xC0, 0x56, 0xE6, 0xF8, 0xC6, 0xED, 0x02, 0x66, 0x32, 0x0D, 0x46, 0x01, 0x00,
      0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x0C, 0xA3, 0xC6, 0x9F, 0x00, 0x26, 0x12, 0x02, 0x86, 0x21, 0x00,
      0x22, 0xA1, 0x20, 0x22, 0x67, 0x11, 0x2C, 0x04, 0x21, 0x9A, 0xFD, 0x42, 0x67, 0x12, 0x32, 0xA0, 0x05,
      0x52, 0x61, 0x34, 0x62, 0x61, 0x2F, 0x72, 0x61, 0x32, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x01, 0xBB,
      0xFD, 0xC0, 0x00, 0x00, 0x72, 0x21, 0x32, 0x22, 0xA0, 0xE8, 0x2A, 0x77, 0x31, 0x91, 0xFD, 0xB2, 0x21,
      0x35, 0xA2, 0x21, 0x33, 0x62, 0x21, 0x2F, 0x52, 0x21, 0x34, 0x2D, 0x07, 0x42, 0xA0, 0x08, 0x42, 0x43,
      0x00, 0x1B, 0x33, 0x77, 0x93, 0xF7, 0x32, 0xC2, 0x70, 0x8D, 0x03, 0x0C, 0x94, 0x42, 0x42, 0x00, 0x1B,
      0x22, 0x37, 0x92, 0xF7, 0x22, 0xA1, 0x00, 0x32, 0xA1, 0x18, 0x0C, 0x74, 0xC6, 0x01, 0x00, 0x00, 0x42,
      0x48, 0x00, 0x1B, 0x22, 0x1B, 0x88, 0x37, 0x92, 0xF5, 0x32, 0xAE, 0xE8, 0x3A, 0x88, 0x0C, 0x87, 0x32,
      0xA1, 0x1F, 0x2A, 0x48, 0x72, 0x44, 0x00, 0x1B, 0x22, 0x27, 0xB3, 0xF5, 0x06, 0x6E, 0x01, 0x00, 0x0C,
      0x06, 0x21, 0x7C, 0xFD, 0x6A, 0x22, 0x22, 0x02, 0x00, 0x27, 0xBD, 0x3C, 0xA7, 0x3C, 0x25, 0xC6, 0x00,
      0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x82, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x28, 0x10, 0x0C, 0xB3, 0x56, 0xA2,
      0xCC, 0xC6, 0x04, 0x00, 0xA7, 0xBF, 0xE8, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x86, 0x01, 0x00,
      0x00, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B,
      0xDD, 0x06, 0xEE, 0xFF, 0x00, 0x21, 0x6A, 0xFD, 0x0C, 0x13, 0x6A, 0x22, 0x22, 0x02, 0x00, 0x41, 0x68,
      0xFD, 0x00, 0x12, 0x40, 0x00, 0x33, 0xA1, 0x40, 0x46, 0xA0, 0x0B, 0x33, 0xE0, 0x33, 0x10, 0x20, 0xDD,
      0xC0, 0x00, 0x02, 0x40, 0xE0, 0xE0, 0x91, 0x48, 0x04, 0x21, 0x52, 0xFD, 0x4A, 0x33, 0x20, 0x26, 0xA0,
      0x32, 0x62, 0x11, 0x1B, 0x66, 0xB6, 0x36, 0x81, 0x21, 0x5E, 0xFD, 0x0C, 0x03, 0x42, 0xA1, 0x20, 0x52,
      0x61, 0x34, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x01, 0x7D, 0xFD, 0xC0, 0x00, 0x00, 0x0C, 0x06, 0x52,
      0x21, 0x34, 0xA2, 0x21, 0x33, 0xB2, 0x21, 0x35, 0x06, 0x18, 0x00, 0x00, 0xF6, 0x3D, 0x3C, 0xA7, 0x3C,
      0x25, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x92, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x29, 0x10, 0x0C,
      0xE3, 0x56, 0xE2, 0xC2, 0xC6, 0x04, 0x00, 0x00, 0x00, 0xA7, 0xBF, 0xE6, 0x1B, 0xCF, 0x22, 0x0F, 0x00,
      0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20,
      0xEE, 0x20, 0x8B, 0xDD, 0x06, 0xF0, 0xFF, 0x00, 0x21, 0x46, 0xFD, 0x41, 0x34, 0xFD, 0x6A, 0x22, 0x22,
      0x02, 0x00, 0xE0, 0x30, 0x24, 0x2A, 0x24, 0x41, 0x43, 0xFD, 0xD2, 0xCD, 0xFD, 0x4A, 0x22, 0x32, 0x42,
      0x18, 0xE0, 0xE3, 0x41, 0x1B, 0x66, 0x21, 0x2D, 0xFD, 0x32, 0x22, 0x13, 0x37, 0x36, 0x96, 0x1C, 0x33,
      0x32, 0x62, 0x13, 0x06, 0x28, 0x01, 0x71, 0x3B, 0xFD, 0x0C, 0x03, 0x70, 0x72, 0x82, 0x42, 0xA0, 0x40,
      0x70, 0x78, 0x80, 0x72, 0xC7, 0x58, 0x22, 0xC1, 0x44, 0x52, 0x61, 0x34, 0x62, 0x61, 0x2F, 0x82, 0x61,
      0x31, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x72, 0x61, 0x27, 0x01, 0x52, 0xFD, 0xC0, 0x00, 0x00, 0x72,
      0x21, 0x27, 0x41, 0x31, 0xFD, 0x22, 0xA1, 0x20, 0x2A, 0x27, 0x32, 0xA0, 0x00, 0x01, 0x4D, 0xFD, 0xC0,
      0x00, 0x00, 0x21, 0x2D, 0xFD, 0x92, 0x21, 0x27, 0x0C, 0x03, 0x2A, 0x29, 0x42, 0xA4, 0x80, 0x01, 0x48,
      0xFD, 0xC0, 0x00, 0x00, 0x82, 0x21, 0x31, 0x52, 0x21, 0x34, 0x28, 0xC8, 0x62, 0x21, 0x2F, 0x80, 0x82,
      0xA0, 0x82, 0x28, 0x11, 0x22, 0x61, 0x2D, 0x82, 0x61, 0x2E, 0x0C, 0x02, 0xA2, 0x21, 0x33, 0xB2, 0x21,
      0x35, 0x86, 0x05, 0x00, 0x00, 0x00, 0x72, 0x21, 0x27, 0x2A, 0x37, 0x32, 0x03, 0x00, 0x1B, 0x22, 0x10,
      0x33, 0xA0, 0x42, 0x23, 0x11, 0x1B, 0x44, 0x42, 0x63, 0x11, 0x82, 0x21, 0x2E, 0x87, 0x92, 0xE4, 0x0C,
      0x02, 0x29, 0x11, 0x29, 0x01, 0x4D, 0x02, 0x0C, 0x13, 0xE0, 0x83, 0x11, 0x72, 0xC1, 0x44, 0x8A, 0x97,
      0x98, 0x09, 0x8A, 0x81, 0x9A, 0x22, 0xF0, 0x22, 0x11, 0x1B, 0x33, 0x29, 0x18, 0x9A, 0x44, 0x66, 0xB3,
      0xE5, 0x82, 0xA0, 0x01, 0xF6, 0x24, 0x02, 0x82, 0xA0, 0x00, 0x31, 0xF7, 0xFC, 0x0C, 0x09, 0x3A, 0x22,
      0x0C, 0x13, 0x20, 0x93, 0x93, 0x80, 0x99, 0x10, 0x7C, 0xF2, 0x16, 0x39, 0x11, 0xC6, 0x00, 0x00, 0x5D,
      0x0B, 0xCD, 0x0F, 0x2C, 0x33, 0x21, 0xF1, 0xFC, 0x39, 0x62, 0xC6, 0x89, 0x02, 0x82, 0x21, 0x27, 0x9A,
      0x38, 0x82, 0x03, 0x00, 0x16, 0x58, 0x0F, 0x10, 0x38, 0xA0, 0x48, 0x03, 0x0C, 0x07, 0x42, 0x61, 0x36,
      0x1B, 0x44, 0x49, 0x03, 0x72, 0x61, 0x38, 0x70, 0x37, 0x20, 0xF0, 0x33, 0x11, 0x32, 0x61, 0x37, 0x32,
      0x21, 0x36, 0x42, 0x21, 0x37, 0x30, 0x30, 0x04, 0x72, 0x21, 0x36, 0x32, 0x61, 0x28, 0x40, 0x33, 0x20,
      0x42, 0x21, 0x38, 0x70, 0x71, 0x41, 0x1B, 0x44, 0x72, 0x61, 0x36, 0x42, 0x61, 0x38, 0x47, 0x98, 0xD6,
      0x0C, 0xA7, 0x87, 0x37, 0x31, 0x70, 0x48, 0x11, 0x90, 0x44, 0x20, 0x00, 0x44, 0x11, 0x40, 0x40, 0x31,
      0x42, 0x61, 0x28, 0x0C, 0x14, 0x00, 0x18, 0x40, 0x00, 0x84, 0xA1, 0x46, 0x03, 0x00, 0x42, 0x21, 0x27,
      0x40, 0x73, 0x90, 0x42, 0x21, 0x28, 0x8A, 0x33, 0x42, 0x57, 0x90, 0x72, 0xA3, 0xFF, 0x37, 0xB7, 0xEB,
      0x86, 0x20, 0x00, 0x00, 0x42, 0x21, 0x27, 0x30, 0x70, 0x94, 0x40, 0x77, 0x90, 0x42, 0x97, 0x90, 0x56,
      0x84, 0x00, 0x22, 0x57, 0x90, 0x20, 0x42, 0x20, 0x22, 0xC2, 0xFE, 0x30, 0x39, 0x41, 0x0C, 0x07, 0x06,
      0x0C, 0x00, 0x32, 0x21, 0x37, 0x30, 0x70, 0x04, 0x70, 0x44, 0xC0, 0x72, 0xAF, 0xFF, 0x40, 0x47, 0x30,
      0x72, 0x21, 0x27, 0x70, 0x44, 0x90, 0x42, 0xD4, 0x09, 0x42, 0x61, 0x28, 0x42, 0x94, 0x10, 0xCC, 0xA4,
      0x42, 0x21, 0x28, 0x22, 0x54, 0x10, 0x20, 0x42, 0x20, 0x22, 0xC2, 0xFE, 0x72, 0x21, 0x36, 0x1B, 0x77,
      0x72, 0x61, 0x36, 0x72, 0x21, 0x36, 0x30, 0x31, 0x41, 0x32, 0x61, 0x37, 0x70, 0x78, 0xC0, 0x0C, 0xB3,
      0x37, 0x97, 0xBA, 0x72, 0x21, 0x37, 0x7C, 0xF8, 0x70, 0x30, 0x04, 0x30, 0x34, 0xC0, 0x30, 0x38, 0x30,
      0x42, 0xA4, 0x90, 0x72, 0x21, 0x27, 0x40, 0x33, 0x80, 0x70, 0x33, 0x90, 0x92, 0x53, 0x00, 0x1B, 0x99,
      0x82, 0x21, 0x2E, 0x87, 0x19, 0x02, 0xC6, 0xBC, 0xFF, 0x92, 0x21, 0x2D, 0x26, 0x29, 0x02, 0x86, 0xA7,
      0x00, 0x86, 0x8D, 0x00, 0x0C, 0xE2, 0xD7, 0xB2, 0x02, 0x86, 0x33, 0x00, 0xC0, 0x2A, 0xC0, 0xA6, 0x22,
      0x02, 0x86, 0x29, 0x00, 0x21, 0xBB, 0xFC, 0xE0, 0x30, 0x94, 0x71, 0xA4, 0xFC, 0x2A, 0x23, 0x70, 0x22,
      0x90, 0x42, 0x12, 0x0C, 0x00, 0x44, 0x11, 0x40, 0x30, 0x31, 0x96, 0x93, 0x01, 0x40, 0x49, 0x31, 0x0C,
      0x13, 0x47, 0xBD, 0x01, 0x0C, 0x03, 0x0C, 0x02, 0x0C, 0x17, 0x40, 0x27, 0x93, 0x37, 0x02, 0x02, 0x06,
      0x25, 0x00, 0x86, 0x0B, 0x00, 0x0C, 0xA2, 0xD7, 0xB2, 0x29, 0x91, 0xAE, 0xFC, 0x7C, 0xF8, 0x00, 0x02,
      0x40, 0xE0, 0x40, 0x91, 0x30, 0x38, 0xC0, 0x40, 0x40, 0x04, 0x4A, 0x33, 0x9A, 0x33, 0x70, 0x33, 0x90,
      0x32, 0x93, 0x0C, 0xD6, 0xE3, 0x06, 0x1B, 0x42, 0x2B, 0x22, 0x27, 0x3D, 0x04, 0x2D, 0x04, 0x86, 0xF6,
      0xFF, 0xA7, 0x3C, 0x24, 0x06, 0x01, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25, 0x0C, 0x22,
      0x20, 0x27, 0x10, 0x1C, 0x03, 0x56, 0xF2, 0x94, 0x46, 0x04, 0x00, 0xA7, 0xBF, 0xE8, 0x1B, 0xCF, 0x22,
      0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22,
      0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD, 0x0C, 0xE2, 0xD7, 0x32, 0x02, 0x06, 0xD7, 0xFF, 0xC6, 0x07, 0x00,
      0x00, 0x32, 0x0C, 0x00, 0x42, 0x0C, 0x01, 0x8B, 0x2D, 0x00, 0x1D, 0x40, 0x00, 0x33, 0xA1, 0x00, 0x12,
      0x40, 0x00, 0x24, 0xA1, 0x20, 0x23, 0x20, 0x20, 0xEE, 0x20, 0x2B, 0xCC, 0xD2, 0xCD, 0x10, 0x21, 0x8A,
      0xFC, 0xE0, 0x30, 0x94, 0x71, 0x72, 0xFC, 0x2A, 0x23, 0x70, 0x22, 0x90, 0x32, 0x12, 0x0C, 0x00, 0x33,
      0x11, 0x30, 0x20, 0x31, 0x96, 0x82, 0x00, 0x30, 0x39, 0x31, 0x20, 0x20, 0x84, 0x06, 0x0A, 0x00, 0x91,
      0x82, 0xFC, 0x0C, 0xA4, 0x7C, 0xF8, 0x1B, 0x34, 0x00, 0x04, 0x40, 0xE0, 0x40, 0x91, 0x20, 0x28, 0xC0,
      0x40, 0x40, 0x04, 0x4A, 0x22, 0x9A, 0x22, 0x70, 0x22, 0x90, 0x22, 0x92, 0x0C, 0xD6, 0x62, 0x00, 0x4D,
      0x03, 0xC6, 0xF7, 0xFF, 0x00, 0x00, 0x22, 0x61, 0x26, 0x82, 0x21, 0x26, 0x0C, 0xF2, 0x00, 0x03, 0x40,
      0xE0, 0xE0, 0x91, 0x30, 0xDD, 0xC0, 0x87, 0x32, 0x13, 0x21, 0x5C, 0xFC, 0x31, 0x66, 0xFC, 0x6A, 0x22,
      0x3A, 0x22, 0x82, 0x42, 0x1C, 0x1B, 0x66, 0xC6, 0x3B, 0x00, 0x00, 0x00, 0x92, 0x21, 0x26, 0x0C, 0x02,
      0x0C, 0x13, 0x42, 0xC9, 0xF0, 0x7D, 0x02, 0x40, 0x73, 0x83, 0x60, 0x32, 0x93, 0x37, 0x07, 0x12, 0x1C,
      0x08, 0x6D, 0x02, 0x82, 0x61, 0x26, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x1C, 0x13, 0x06, 0x5B,
      0xFF, 0x21, 0x65, 0xFC, 0x92, 0x21, 0x26, 0x9A, 0x22, 0x22, 0xC2, 0xF0, 0x22, 0x02, 0x00, 0x22, 0x61,
      0x24, 0x27, 0xBD, 0x3F, 0xA7, 0x3C, 0x24, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25,
      0x0C, 0x22, 0x20, 0x27, 0x10, 0x1C, 0x23, 0x56, 0xD2, 0x83, 0xC6, 0x04, 0x00, 0x00, 0xA7, 0xBF, 0xE7,
      0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x46, 0x01, 0x00, 0x22, 0x0C, 0x00, 0xC2, 0xCC, 0x01, 0x82,
      0x21, 0x24, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0xD2, 0xCD, 0x08, 0x20, 0xEE, 0x20, 0x87, 0x3D, 0xBF,
      0x21, 0x51, 0xFC, 0x82, 0x21, 0x26, 0x92, 0x21, 0x24, 0x0C, 0x17, 0x8A, 0x22, 0x00, 0x19, 0x40, 0x00,
      0x77, 0xA1, 0x22, 0xC2, 0xF0, 0x22, 0x02, 0x00, 0x0B, 0x77, 0xE0, 0x77, 0x10, 0x2A, 0x77, 0x21, 0x3B,
      0xFC, 0x41, 0x2F, 0xFC, 0x2A, 0x26, 0x4A, 0x22, 0x00, 0x09, 0x40, 0xE0, 0xE0, 0x91, 0x90, 0xDD, 0xC0,
      0x22, 0xC2, 0x1C, 0x0C, 0x03, 0x66, 0xB8, 0x09, 0x31, 0x43, 0xFC, 0x6A, 0x44, 0x3A, 0x44, 0x32, 0x04,
      0x1C, 0x4D, 0x07, 0x52, 0x61, 0x34, 0x62, 0x61, 0x2F, 0x72, 0x61, 0x32, 0xA2, 0x61, 0x33, 0xB2, 0x61,
      0x35, 0x01, 0x55, 0xFC, 0xC0, 0x00, 0x00, 0x62, 0x21, 0x2F, 0x72, 0x21, 0x32, 0x52, 0x21, 0x34, 0x7A,
      0x66, 0xA2, 0x21, 0x33, 0xB2, 0x21, 0x35, 0x46, 0x00, 0x00, 0x0C, 0x06, 0x71, 0x1B, 0xFC, 0x42, 0x27,
      0x11, 0x22, 0x27, 0x12, 0x2A, 0x24, 0x27, 0xB6, 0x02, 0x46, 0x6D, 0xFF, 0x67, 0x92, 0x06, 0x06, 0x02,
      0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x1C, 0x53, 0x86, 0x21, 0xFF, 0x31, 0x2E, 0xFC, 0x21, 0x1F, 0xFC, 0x52,
      0x61, 0x34, 0x62, 0x61, 0x2F, 0xA2, 0x61, 0x33, 0xB2, 0x61, 0x35, 0x72, 0x61, 0x32, 0x01, 0x40, 0xFC,
      0xC0, 0x00, 0x00, 0x72, 0x21, 0x32, 0x21, 0x17, 0xFC, 0x32, 0x27, 0x11, 0x42, 0x27, 0x12, 0x2A, 0x33,
      0x7A, 0x33, 0x21, 0x14, 0xFC, 0x32, 0xC3, 0x1C, 0x01, 0x39, 0xFC, 0xC0, 0x00, 0x00, 0xB2, 0x21, 0x35,
      0xA2, 0x21, 0x33, 0x62, 0x21, 0x2F, 0x52, 0x21, 0x34, 0x21, 0x02, 0xFC, 0x38, 0xC2, 0x0B, 0x33, 0x39,
      0xC2, 0x81, 0x00, 0xFC, 0x28, 0xC8, 0xD6, 0x62, 0xB5, 0x86, 0x53, 0x01, 0xC0, 0x2A, 0xC0, 0xE6, 0x42,
      0x08, 0x0C, 0xE3, 0xD7, 0xB3, 0x13, 0x06, 0x36, 0x00, 0x00, 0x92, 0x21, 0x29, 0x50, 0x39, 0xC0, 0xA6,
      0x23, 0x02, 0x06, 0x4F, 0x00, 0xC6, 0xF9, 0xFF, 0x00, 0xA6, 0x22, 0x02, 0x86, 0x28, 0x00, 0x71, 0xF4,
      0xFB, 0xE0, 0x20, 0x94, 0x70, 0x22, 0x90, 0x42, 0x12, 0xBC, 0x00, 0x44, 0x11, 0x40, 0x30, 0x31, 0x96,
      0x93, 0x01, 0x40, 0x49, 0x31, 0x0C, 0x13, 0x47, 0xBD, 0x01, 0x0C, 0x03, 0x0C, 0x02, 0x0C, 0x17, 0x40,
      0x27, 0x93, 0x37, 0x02, 0x02, 0x46, 0x25, 0x00, 0x86, 0x0B, 0x00, 0x0C, 0xA2, 0xD7, 0xB2, 0x29, 0x7C,
      0xF8, 0x92, 0xA4, 0xB0, 0x00, 0x02, 0x40, 0xE0, 0x40, 0x91, 0x30, 0x38, 0xC0, 0x40, 0x40, 0x04, 0x4A,
      0x33, 0x9A, 0x33, 0x70, 0x33, 0x90, 0x32, 0x93, 0x0C, 0xD6, 0xF3, 0x06, 0x1B, 0x42, 0x2B, 0x22, 0x27,
      0x3D, 0x04, 0x2D, 0x04, 0x86, 0xF6, 0xFF, 0xA7, 0x3C, 0x25, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F,
      0x72, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x27, 0x10, 0x1C, 0x73, 0x8C, 0x12, 0xC6, 0xA3, 0xFD, 0x46, 0x04,
      0x00, 0xA7, 0xBF, 0xE6, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00,
      0x1B, 0xCC, 0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD, 0x0C, 0xE2, 0xD7, 0x32,
      0x02, 0x06, 0xD8, 0xFF, 0xC6, 0x07, 0x00, 0x00, 0x32, 0x0C, 0x00, 0x42, 0x0C, 0x01, 0x8B, 0x2D, 0x00,
      0x1D, 0x40, 0x00, 0x33, 0xA1, 0x00, 0x12, 0x40, 0x00, 0x24, 0xA1, 0x20, 0x23, 0x20, 0xE0, 0xE2, 0x20,
      0x2B, 0xCC, 0xD2, 0xCD, 0x10, 0x41, 0xC4, 0xFB, 0xE0, 0x20, 0x94, 0x40, 0x22, 0x90, 0x22, 0x12, 0xBC,
      0x00, 0x22, 0x11, 0x20, 0x60, 0x31, 0x96, 0x86, 0x00, 0x20, 0x29, 0x31, 0x60, 0x60, 0x84, 0x86, 0x09,
      0x00, 0x0C, 0xA3, 0x7C, 0xF7, 0x82, 0xA4, 0xB0, 0x1B, 0x23, 0x00, 0x03, 0x40, 0xE0, 0x30, 0x91, 0x60,
      0x67, 0xC0, 0x30, 0x30, 0x04, 0x3A, 0x66, 0x8A, 0x66, 0x40, 0x66, 0x90, 0x62, 0x96, 0x0C, 0xD6, 0x46,
      0x00, 0x3D, 0x02, 0xC6, 0xF7, 0xFF, 0x00, 0x02, 0x40, 0xE0, 0xE0, 0x91, 0x20, 0xDD, 0xC0, 0x22, 0xA0,
      0xFF, 0x67, 0xB2, 0x02, 0x46, 0x49, 0x00, 0x06, 0x02, 0x00, 0x1C, 0x83, 0xC6, 0xE4, 0x00, 0x5D, 0x0B,
      0xCD, 0x0F, 0x82, 0x21, 0x29, 0x87, 0xB5, 0xF0, 0x62, 0x45, 0x00, 0x1B, 0x55, 0x86, 0xFD, 0x00, 0x0C,
      0xE9, 0xD7, 0x39, 0x19, 0x32, 0x0C, 0x01, 0x22, 0x0C, 0x00, 0x80, 0x33, 0x11, 0x20, 0x23, 0x20, 0x00,
      0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x2B, 0xCC, 0xD2, 0xCD, 0x10, 0x32, 0xA0, 0xB0, 0xE0,
      0x20, 0x94, 0x41, 0x9E, 0xFB, 0x3A, 0x22, 0x40, 0x22, 0x90, 0x22, 0x12, 0x0C, 0x00, 0x22, 0x11, 0x20,
      0x30, 0x31, 0x20, 0x29, 0x31, 0xD6, 0xA3, 0x02, 0x0C, 0xA4, 0x1B, 0x24, 0x7C, 0xF6, 0x00, 0x04, 0x40,
      0xE0, 0x40, 0x91, 0x30, 0x36, 0xC0, 0x40, 0x40, 0x04, 0x4A, 0x33, 0x72, 0xA4, 0xB0, 0x91, 0x93, 0xFB,
      0x7A, 0x33, 0x90, 0x33, 0x90, 0x32, 0x93, 0x0C, 0xD6, 0x53, 0x00, 0x4D, 0x02, 0xC6, 0xF5, 0xFF, 0x00,
      0x6D, 0x03, 0x00, 0x02, 0x40, 0xE0, 0xE0, 0x91, 0x20, 0xDD, 0xC0, 0x87, 0x03, 0x02, 0xC6, 0x24, 0x00,
      0x0C, 0xE2, 0xD7, 0x32, 0x19, 0x42, 0x0C, 0x01, 0x22, 0x0C, 0x00, 0x80, 0x44, 0x11, 0x20, 0x24, 0x20,
      0x00, 0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x2B, 0xCC, 0xD2, 0xCD, 0x10, 0x42, 0xA0, 0xB0,
      0xE0, 0x20, 0x94, 0x71, 0x80, 0xFB, 0x4A, 0x22, 0x70, 0x22, 0x90, 0x42, 0x12, 0x0C, 0x00, 0x44, 0x11,
      0x40, 0x90, 0x31, 0x92, 0x61, 0x27, 0x40, 0x49, 0x31, 0xD6, 0xF9, 0x02, 0x0C, 0xA7, 0x92, 0x21, 0x27,
      0x1B, 0x47, 0x7C, 0xF2, 0x00, 0x07, 0x40, 0xE0, 0x70, 0x91, 0x90, 0x22, 0xC0, 0x70, 0x70, 0x04, 0x7A,
      0x22, 0x91, 0x74, 0xFB, 0x72, 0xA4, 0xB0, 0x7A, 0x22, 0x90, 0x22, 0x90, 0x22, 0x92, 0x0C, 0x22, 0x61,
      0x27, 0xD6, 0x42, 0x00, 0x7D, 0x04, 0x46, 0xF4, 0xFF, 0x22, 0x21, 0x27, 0x32, 0x45, 0x00, 0x00, 0x04,
      0x40, 0xE0, 0xE0, 0x91, 0x40, 0xDD, 0xC0, 0x87, 0x02, 0x06, 0x1B, 0x55, 0x6D, 0x02, 0xC6, 0x02, 0x00,
      0x32, 0x21, 0x27, 0x32, 0x45, 0x01, 0x2B, 0x55, 0x06, 0x67, 0xFF, 0x00, 0x60, 0x60, 0x84, 0x66, 0xF6,
      0x02, 0x46, 0xBA, 0x00, 0x22, 0xAE, 0xFF, 0x2A, 0x66, 0x21, 0x7D, 0xFB, 0xE0, 0x66, 0x11, 0x6A, 0x22,
      0x28, 0x02, 0x22, 0x61, 0x24, 0x21, 0x7B, 0xFB, 0x6A, 0x62, 0x28, 0x06, 0x62, 0x21, 0x24, 0x16, 0x26,
      0x06, 0x67, 0xBD, 0x44, 0x6D, 0x02, 0xA7, 0xBC, 0x06, 0x46, 0x08, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72,
      0x21, 0x25, 0x0C, 0x23, 0x30, 0x37, 0x10, 0x9C, 0xA3, 0x1C, 0x93, 0x46, 0x20, 0xFD, 0x00, 0x00, 0xA7,
      0xBF, 0xE7, 0x1B, 0xCF, 0x32, 0x0F, 0x00, 0x5D, 0x0B, 0xC6, 0x01, 0x00, 0x32, 0x0C, 0x00, 0x1B, 0xCC,
      0x46, 0x00, 0x00, 0x2D, 0x06, 0x82, 0x21, 0x24, 0x00, 0x1D, 0x40, 0x00, 0x33, 0xA1, 0x8B, 0xDD, 0x30,
      0xEE, 0x20, 0x87, 0x3D, 0xBA, 0x92, 0x21, 0x24, 0x0C, 0x13, 0x00, 0x19, 0x40, 0x00, 0x33, 0xA1, 0x0B,
      0x33, 0xE0, 0x33, 0x10, 0x90, 0xDD, 0xC0, 0x00, 0x09, 0x40, 0xE0, 0xE0, 0x91, 0x3A, 0x22, 0x0C, 0xE3,
      0xD7, 0xB3, 0x02, 0xC6, 0x34, 0x00, 0xC0, 0x3A, 0xC0, 0xA6, 0x23, 0x02, 0xC6, 0x2A, 0x00, 0x71, 0x3D,
      0xFB, 0xE0, 0x30, 0x94, 0x70, 0x33, 0x90, 0x32, 0xD3, 0x0F, 0x62, 0x13, 0x0C, 0x00, 0x66, 0x11, 0x60,
      0x40, 0x31, 0x96, 0xA4, 0x01, 0x60, 0x69, 0x31, 0x0C, 0x14, 0x67, 0xBD, 0x02, 0x42, 0xA0, 0x00, 0x0C,
      0x03, 0x0C, 0x17, 0x60, 0x37, 0x93, 0x47, 0x03, 0x02, 0x86, 0x26, 0x00, 0xC6, 0x0B, 0x00, 0x0C, 0xA3,
      0xD7, 0xB3, 0x2A, 0x91, 0x4D, 0xFB, 0x7C, 0xF8, 0x00, 0x03, 0x40, 0xE0, 0x60, 0x91, 0x40, 0x48, 0xC0,
      0x60, 0x60, 0x04, 0x6A, 0x44, 0x9A, 0x44, 0x70, 0x44, 0x90, 0x42, 0x94, 0x0C, 0xD6, 0x44, 0x07, 0x1B,
      0x63, 0x2B, 0x33, 0x37, 0x3D, 0x05, 0x3D, 0x06, 0x86, 0xF6, 0xFF, 0x00, 0x6D, 0x02, 0xA7, 0xBC, 0x06,
      0xC6, 0x07, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25, 0x0C, 0x23, 0x30, 0x37, 0x10, 0x9C, 0x83,
      0x1C, 0xA3, 0x46, 0xEB, 0xFC, 0xA7, 0xBF, 0xE9, 0x1B, 0xCF, 0x32, 0x0F, 0x00, 0x5D, 0x0B, 0xC6, 0x01,
      0x00, 0x32, 0x0C, 0x00, 0x1B, 0xCC, 0x46, 0x00, 0x00, 0x2D, 0x06, 0x00, 0x1D, 0x40, 0x00, 0x33, 0xA1,
      0x30, 0xEE, 0x20, 0x8B, 0xDD, 0x0C, 0xE3, 0xD7, 0x33, 0x02, 0xC6, 0xD5, 0xFF, 0xC6, 0x07, 0x00, 0x00,
      0x32, 0x0C, 0x00, 0x62, 0x0C, 0x01, 0x8B, 0x4D, 0x00, 0x1D, 0x40, 0x00, 0x33, 0xA1, 0x00, 0x14, 0x40,
      0x00, 0x46, 0xA1, 0x40, 0x33, 0x20, 0x30, 0xEE, 0x20, 0x2B, 0xCC, 0xD2, 0xCD, 0x10, 0x71, 0x0B, 0xFB,
      0xE0, 0x30, 0x94, 0x70, 0x33, 0x90, 0x32, 0xD3, 0x0F, 0x42, 0x13, 0x0C, 0x00, 0x44, 0x11, 0x40, 0x30,
      0x31, 0x96, 0x83, 0x00, 0x40, 0x49, 0x31, 0x30, 0x30, 0x84, 0x86, 0x09, 0x00, 0x91, 0x20, 0xFB, 0x0C,
      0xA6, 0x7C, 0xF8, 0x1B, 0x46, 0x00, 0x06, 0x40, 0xE0, 0x60, 0x91, 0x30, 0x38, 0xC0, 0x60, 0x60, 0x04,
      0x6A, 0x33, 0x9A, 0x33, 0x70, 0x33, 0x90, 0x32, 0x93, 0x0C, 0xD6, 0x43, 0x00, 0x6D, 0x04, 0xC6, 0xF7,
      0xFF, 0x00, 0x04, 0x40, 0xE0, 0xE0, 0x91, 0x40, 0xDD, 0xC0, 0x41, 0x15, 0xFB, 0xE0, 0x33, 0x11, 0x3A,
      0x44, 0x48, 0x04, 0x42, 0x61, 0x24, 0x41, 0x13, 0xFB, 0x82, 0x21, 0x24, 0x3A, 0x34, 0x38, 0x03, 0x32,
      0x61, 0x26, 0x16, 0x68, 0x06, 0x87, 0xBD, 0x42, 0x6D, 0x02, 0xA7, 0xBC, 0x06, 0xC6, 0x07, 0x00, 0x5D,
      0x0B, 0xCD, 0x0F, 0x92, 0x21, 0x25, 0x0C, 0x23, 0x30, 0x39, 0x10, 0x9C, 0x83, 0x1C, 0xB3, 0x06, 0xB5,
      0xFC, 0xA7, 0xBF, 0xE9, 0x1B, 0xCF, 0x32, 0x0F, 0x00, 0x5D, 0x0B, 0xC6, 0x01, 0x00, 0x32, 0x0C, 0x00,
      0x1B, 0xCC, 0x46, 0x00, 0x00, 0x2D, 0x06, 0x62, 0x21, 0x24, 0x00, 0x1D, 0x40, 0x00, 0x33, 0xA1, 0x8B,
      0xDD, 0x30, 0xEE, 0x20, 0x67, 0x3D, 0xBC, 0x72, 0x21, 0x24, 0x0C, 0x13, 0x00, 0x17, 0x40, 0x00, 0x33,
      0xA1, 0x82, 0x21, 0x26, 0x0B, 0x33, 0xE0, 0x33, 0x10, 0x3A, 0x88, 0x00, 0x07, 0x40, 0xE0, 0xE0, 0x91,
      0x70, 0xDD, 0xC0, 0x82, 0x61, 0x26, 0x91, 0xDD, 0xFA, 0x62, 0x21, 0x26, 0x90, 0x95, 0xC0, 0x72, 0x21,
      0x2C, 0x41, 0xDA, 0xFA, 0x60, 0x39, 0xC0, 0x70, 0x33, 0x10, 0x4A, 0x33, 0x92, 0x61, 0x2A, 0x30, 0x43,
      0x20, 0x57, 0xB3, 0x02, 0x50, 0x45, 0x20, 0x82, 0x21, 0x29, 0x2A, 0x44, 0x47, 0x38, 0x45, 0xC6, 0x12,
      0x00, 0x21, 0xCA, 0xFA, 0x2C, 0x53, 0x39, 0x62, 0xC6, 0x60, 0x00, 0x3C, 0x53, 0x21, 0xC7, 0xFA, 0x0C,
      0x24, 0x39, 0x62, 0x46, 0x5F, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x92, 0x21, 0x29, 0x97, 0xB5, 0xE9, 0x72,
      0x21, 0x2A, 0x82, 0x21, 0x26, 0x92, 0x21, 0x2C, 0x80, 0x27, 0xC0, 0x31, 0xC7, 0xFA, 0x90, 0x22, 0x10,
      0x2A, 0x23, 0x22, 0x02, 0x00, 0x1B, 0x77, 0x22, 0x45, 0x00, 0x72, 0x61, 0x2A, 0x1B, 0x55, 0x2D, 0x06,
      0x0B, 0x62, 0x56, 0x12, 0xFD, 0x46, 0x0D, 0x00, 0x00, 0x42, 0x03, 0x00, 0x62, 0xC2, 0xFD, 0x42, 0x45,
      0x00, 0x42, 0x03, 0x01, 0x42, 0x45, 0x01, 0x42, 0x03, 0x02, 0x3B, 0x33, 0x42, 0x45, 0x02, 0x3B, 0x55,
      0xA6, 0x36, 0x04, 0x2D, 0x06, 0x86, 0xF7, 0xFF, 0xA6, 0x16, 0x10, 0x22, 0x03, 0x00, 0x22, 0x45, 0x00,
      0x66, 0x26, 0x05, 0x22, 0x03, 0x01, 0x22, 0x45, 0x01, 0x6A, 0x55, 0x82, 0xA1, 0x00, 0x86, 0xAA, 0xFE,
      0x00, 0x00, 0x21, 0xA8, 0xFA, 0x28, 0xB2, 0x07, 0xE2, 0x02, 0x06, 0x6C, 0xFC, 0xD0, 0x20, 0x24, 0x27,
      0xBD, 0x3D, 0xA7, 0x3C, 0x27, 0x06, 0x01, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x72, 0x21, 0x25, 0x0C,
      0x22, 0x20, 0x27, 0x10, 0x2C, 0x03, 0x8C, 0x12, 0x46, 0x6A, 0xFC, 0x86, 0x04, 0x00, 0x00, 0xA7, 0xBF,
      0xE5, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00,
      0x1D, 0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD, 0xC6, 0xEE, 0xFF, 0xD0, 0x20, 0x24, 0x00,
      0x02, 0x40, 0xE0, 0xE0, 0x91, 0x7C, 0x82, 0x20, 0xDD, 0x10, 0x0C, 0x06, 0x16, 0xDD, 0x04, 0xF6, 0x8D,
      0x3E, 0xA7, 0x3C, 0x27, 0x06, 0x01, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x82, 0x21, 0x25, 0x0C, 0x22,
      0x20, 0x28, 0x10, 0x2C, 0x93, 0x8C, 0x12, 0x46, 0x55, 0xFC, 0x86, 0x04, 0x00, 0x00, 0xA7, 0xBF, 0xE5,
      0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C, 0x00, 0x1B, 0xCC, 0x00, 0x1D,
      0x40, 0x00, 0x22, 0xA1, 0x20, 0xEE, 0x20, 0x8B, 0xDD, 0x86, 0xEF, 0xFF, 0x00, 0xE0, 0x20, 0x74, 0xD2,
      0xCD, 0xF8, 0xE0, 0xE8, 0x41, 0x46, 0x0B, 0x00, 0xA7, 0x3C, 0x25, 0xC6, 0x00, 0x00, 0x5D, 0x0B, 0xCD,
      0x0F, 0x92, 0x21, 0x25, 0x0C, 0x22, 0x20, 0x29, 0x10, 0x2C, 0xA3, 0x8C, 0x12, 0xC6, 0x42, 0xFC, 0x46,
      0x04, 0x00, 0xA7, 0xBF, 0xE6, 0x1B, 0xCF, 0x22, 0x0F, 0x00, 0x5D, 0x0B, 0x06, 0x01, 0x00, 0x22, 0x0C,
      0x00, 0x1B, 0xCC, 0x31, 0x70, 0xFA, 0x1B, 0x66, 0x48, 0xA3, 0x80, 0x44, 0x11, 0x40, 0x22, 0x20, 0x29,
      0xA3, 0xF6, 0x46, 0x07, 0xC6, 0xDA, 0xFF, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x21, 0x6A, 0xFA, 0x2C, 0x23,
      0x39, 0x62, 0x0C, 0x04, 0x86, 0x01, 0x00, 0x00, 0x5D, 0x0B, 0xCD, 0x0F, 0x7C, 0xF4, 0x21, 0x65, 0xFA,
      0x72, 0x21, 0x26, 0x82, 0x21, 0x24, 0x92, 0x21, 0x2A, 0xD9, 0x72, 0xE2, 0x62, 0x14, 0x79, 0xE2, 0x69,
      0xF2, 0x82, 0x62, 0x10, 0x92, 0x62, 0x15, 0x7C, 0xFE, 0xF0, 0xDC, 0xC0, 0xB0, 0xC5, 0xC0, 0xE7, 0x94,
      0x02, 0xC6, 0x40, 0x00, 0x58, 0xD2, 0x31, 0x7B, 0xFA, 0x50, 0xE0, 0xF4, 0x2D, 0x0C, 0x50, 0x50, 0xF5,
      0x42, 0x61, 0x30, 0x52, 0x61, 0x34, 0xB2, 0x61, 0x35, 0x01, 0x86, 0xFA, 0xC0, 0x00, 0x00, 0x7D, 0x02,
      0x8D, 0x0C, 0x0C, 0x79, 0x42, 0x21, 0x30, 0x52, 0x21, 0x34, 0xB2, 0x21, 0x35, 0x06, 0x28, 0x00, 0xA2,
      0x03, 0x00, 0xEA, 0xEA, 0xA2, 0x03, 0x01, 0x5A, 0x5E, 0xAA, 0xEE, 0xA2, 0x03, 0x02, 0xEA, 0x55, 0xAA,
      0xEE, 0xA2, 0x03, 0x03, 0xEA, 0x55, 0xAA, 0xEE, 0xA2, 0x03, 0x04, 0xEA, 0x55, 0xAA, 0xEE, 0xA2, 0x03,
      0x05, 0xEA, 0x55, 0xAA, 0xEE, 0xA2, 0x03, 0x06, 0xEA, 0x55, 0xAA, 0xEE, 0xA2, 0x03, 0x07, 0xEA, 0x55,
      0xAA, 0xEE, 0xEA, 0x55, 0x8B, 0x33, 0x2A, 0xA3, 0x77, 0x3A, 0xC0, 0x70, 0x23, 0x41, 0xB0, 0x22, 0xB0,
      0xB0, 0xA0, 0x60, 0x06, 0x02, 0x00, 0x32, 0x02, 0x00, 0x1B, 0x22, 0x3A, 0xEE, 0xEA, 0x55, 0x2A, 0x3A,
      0x20, 0xB2, 0x20, 0x77, 0x33, 0xEE, 0x31, 0x5A, 0xFA, 0xE0, 0x2E, 0x20, 0x42, 0x61, 0x30, 0x72, 0x61,
      0x32, 0x82, 0x61, 0x31, 0x92, 0x61, 0x2F, 0xB2, 0x61, 0x35, 0x52, 0x61, 0x34, 0x01, 0x63, 0xFA, 0xC0,
      0x00, 0x00, 0x52, 0x21, 0x34, 0x31, 0x52, 0xFA, 0xED, 0x02, 0x2D, 0x05, 0x01, 0x5F, 0xFA, 0xC0, 0x00,
      0x00, 0x72, 0x21, 0x32, 0x82, 0x21, 0x31, 0xB2, 0x21, 0x35, 0x70, 0x88, 0xC0, 0x92, 0x21, 0x2F, 0x71,
      0x4A, 0xFA, 0x42, 0x21, 0x30, 0x5D, 0x02, 0x8C, 0x68, 0x3D, 0x0B, 0xB0, 0x29, 0xC0, 0x86, 0xE3, 0xFF,
      0x00, 0x55, 0x11, 0x21, 0x24, 0xFA, 0xEA, 0x55, 0x59, 0xD2, 0xED, 0x04, 0xDC, 0xB4, 0xE8, 0xA2, 0x7C,
      0xE2, 0xE0, 0xE5, 0xC0, 0xE0, 0x82, 0x93, 0xED, 0x08, 0x46, 0x03, 0x00, 0x0C, 0x0C, 0x06, 0x01, 0x00,
      0x00, 0x00, 0x00, 0xCD, 0x05, 0xDD, 0x0C, 0x7C, 0xDE, 0x31, 0x3D, 0xFA, 0x62, 0x21, 0x2B, 0x28, 0x23,
      0xD0, 0x66, 0xC0, 0xD0, 0x22, 0xC0, 0xDA, 0xFF, 0xD1, 0x1C, 0xFA, 0x29, 0x23, 0x38, 0x0D, 0x71, 0x1C,
      0xFA, 0xCA, 0xC3, 0x70, 0x3C, 0xC0, 0x0C, 0x15, 0x62, 0x61, 0x2B, 0x0C, 0x02, 0x62, 0xD3, 0x80, 0x60,
      0x25, 0x83, 0x0B, 0x5E, 0x50, 0x5E, 0x20, 0x50, 0x5F, 0x05, 0xC9, 0x0D, 0x50, 0x22, 0x20, 0x8C, 0x72,
      0xCD, 0x07, 0x2D, 0x07, 0x05, 0x34, 0x00, 0xC9, 0x0D, 0x82, 0x21, 0x2B, 0xC1, 0x08, 0xFA, 0xCC, 0x48,
      0xD6, 0x8E, 0x01, 0x46, 0x03, 0x00, 0x28, 0x3C, 0x16, 0x42, 0xFF, 0xA6, 0x1E, 0x02, 0xC6, 0x63, 0xFB,
      0xC6, 0xFA, 0xFF, 0x22, 0xA0, 0xC7, 0x29, 0x5C, 0xC6, 0x03, 0x00, 0xCC, 0xCE, 0x28, 0x3C, 0xCC, 0x12,
      0xC6, 0x58, 0xFA, 0x22, 0xA0, 0xC8, 0x86, 0x02, 0x00, 0x00, 0x28, 0x3C, 0x8C, 0x12, 0x46, 0x55, 0xFA,
      0x22, 0xA0, 0xC9, 0x29, 0x5C, 0x46, 0x53, 0xFA, 0x00, 0x28, 0x2C, 0x8C, 0x12, 0x46, 0x51, 0xFA, 0x21,
      0xF9, 0xF9, 0x01, 0x23, 0xFA, 0xC0, 0x00, 0x00, 0x01, 0x28, 0xFA, 0xC0, 0x00, 0x00, 0xC6, 0x4C, 0xFA,
      0xC8, 0x3C, 0xCC, 0x1C, 0x06, 0x4B, 0xFA, 0x22, 0xA3, 0xE8, 0x01, 0x1D, 0xFA, 0xC0, 0x00, 0x00, 0xC0,
      0x0C, 0x00, 0x46, 0x47, 0xFA, 0x01, 0x21, 0xFA, 0xC0, 0x00, 0x00, 0x20, 0xDF, 0x83, 0x06, 0x9C, 0xFA,
      0x00, 0xE8, 0x2C, 0xD8, 0x3C, 0xE0, 0x2D, 0x20, 0x20, 0x20, 0xB4, 0x8C, 0x12, 0x86, 0x0C, 0xFB, 0xC6,
      0x9A, 0xFA, 0x28, 0x2C, 0x38, 0x3C, 0xC5, 0x5C, 0x00, 0xC6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x22, 0x2C,
      0x02, 0x32, 0x2C, 0x05, 0xC5, 0x30, 0x00, 0xD2, 0xA0, 0x00, 0x0C, 0x13, 0x20, 0xD3, 0x93, 0x06, 0x04,
      0xFB, 0x00, 0x00, 0x32, 0x2C, 0x05, 0x22, 0x2C, 0x02, 0xD2, 0x2C, 0x03, 0x42, 0x61, 0x30, 0x05, 0x2F,
      0x00, 0x31, 0xD8, 0xF9, 0x42, 0x21, 0x30, 0x20, 0xDD, 0x11, 0xE9, 0x63, 0x32, 0xD3, 0x2B, 0xD9, 0x23,
      0x20, 0x4E, 0x83, 0x86, 0xB7, 0xFA, 0x28, 0x2C, 0x38, 0x3C, 0x48, 0x4C, 0x58, 0x5C, 0x68, 0x6C, 0x78,
      0x7C, 0x0C, 0x0D, 0x01, 0xF8, 0xF9, 0xC0, 0x00, 0x00, 0xED, 0x02, 0x0C, 0x12, 0xE0, 0xD2, 0x93, 0x06,
      0xF6, 0xFA, 0x01, 0xF3, 0xF9, 0xC0, 0x00, 0x00, 0x0C, 0x0D, 0x06, 0xF0, 0xFA, 0x00, 0x28, 0x2C, 0x38,
      0x3C, 0xC0, 0x20, 0x00, 0x39, 0x02, 0x0C, 0x0E, 0xDD, 0x0E, 0x06, 0xEF, 0xFA, 0x21, 0xC5, 0xF9, 0x48,
      0x5C, 0x38, 0x2C, 0x49, 0x02, 0x21, 0xC3, 0xF9, 0x39, 0x02, 0x06, 0xF6, 0xFF, 0x41, 0xC1, 0xF9, 0x0C,
      0x02, 0x58, 0x04, 0x32, 0xA0, 0xC8, 0x29, 0x04, 0x41, 0xBD, 0xF9, 0x50, 0x32, 0x83, 0x0C, 0x1D, 0x29,
      0x04, 0x30, 0xD2, 0x83, 0x86, 0xE0, 0xFA, 0x02, 0x21, 0x43, 0x92, 0xA1, 0x10, 0xC2, 0x21, 0x42, 0xD2,
      0x21, 0x41, 0xE2, 0x21, 0x40, 0xF2, 0x21, 0x3F, 0x9A, 0x11, 0x0D, 0xF0, 0x00, 0xF8, 0x02, 0x00, 0x60,
      0x10, 0x02, 0x00, 0x60, 0x00, 0x02, 0x00, 0x60, 0x00, 0x00, 0x00, 0x08, 0x31, 0xFC, 0xFF, 0xC0, 0x20,
      0x00, 0x28, 0x03, 0x20, 0x20, 0x24, 0x56, 0x42, 0xFF, 0x31, 0xF9, 0xFF, 0x41, 0xFA, 0xFF, 0xC0, 0x20,
      0x00, 0x29, 0x03, 0x21, 0xF7, 0xFF, 0xC0, 0x20, 0x00, 0x49, 0x02, 0xC0, 0x20, 0x00, 0x48, 0x02, 0x56,
      0x74, 0xFF, 0xC0, 0x20, 0x00, 0x38, 0x03, 0x0C, 0x12, 0x30, 0x30, 0x04, 0x20, 0x23, 0x30, 0x0D, 0xF0,
      0x08, 0x00, 0x00, 0x60, 0x1C, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x60, 0x94, 0x2B, 0xFF, 0x3F, 0x84,
      0x80, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x4C, 0xEB, 0xFE, 0x3F, 0x10, 0x00, 0x00, 0x60, 0x98, 0x2B,
      0xFF, 0x3F, 0x21, 0xF7, 0xFF, 0x12, 0xC1, 0xF0, 0xD9, 0x11, 0xC0, 0x20, 0x00, 0xD8, 0x02, 0x09, 0x31,
      0xC9, 0x21, 0x21, 0xF3, 0xFF, 0xC0, 0x20, 0x00, 0xC2, 0x22, 0x00, 0xC0, 0xC0, 0x74, 0x16, 0x7C, 0x09,
      0x31, 0xF1, 0xFF, 0xC0, 0x20, 0x00, 0x22, 0x23, 0x00, 0x31, 0xEF, 0xFF, 0x20, 0x20, 0x74, 0x85, 0x4F,
      0x00, 0x32, 0xAF, 0xFE, 0x96, 0x72, 0x03, 0x31, 0x7E, 0xF9, 0x41, 0x7E, 0xF9, 0x20, 0x20, 0x74, 0x40,
      0x43, 0x80, 0xC0, 0x20, 0x00, 0x58, 0x04, 0x41, 0xE8, 0xFF, 0x4A, 0x33, 0x42, 0x13, 0x00, 0x40, 0x40,
      0xF4, 0x1B, 0x64, 0x60, 0x60, 0xF4, 0xC0, 0x20, 0x00, 0x62, 0x53, 0x00, 0x4A, 0x45, 0xC0, 0x20, 0x00,
      0x22, 0x44, 0x00, 0x32, 0x13, 0x00, 0x21, 0xE1, 0xFF, 0x30, 0x30, 0xF4, 0x27, 0x93, 0x3C, 0x21, 0x6F,
      0xF9, 0x31, 0x6F, 0xF9, 0x41, 0xE0, 0xFF, 0x3A, 0x32, 0xC0, 0x20, 0x00, 0x68, 0x03, 0x51, 0xDC, 0xFF,
      0x27, 0x96, 0x0F, 0xC6, 0xFF, 0xFF, 0xC0, 0x20, 0x00, 0x29, 0x04, 0xC0, 0x20, 0x00, 0x59, 0x03, 0x46,
      0x02, 0x00, 0xC0, 0x20, 0x00, 0x59, 0x04, 0xC0, 0x20, 0x00, 0x29, 0x03, 0x31, 0xD2, 0xFF, 0x3A, 0x22,
      0x0C, 0x03, 0xC0, 0x20, 0x00, 0x32, 0x52, 0x00, 0x0B, 0xCC, 0x56, 0xAC, 0xF6, 0x06, 0xD6, 0xFF, 0x21,
      0xD0, 0xFF, 0x08, 0x31, 0xC0, 0x20, 0x00, 0xD9, 0x02, 0xC8, 0x21, 0xD8, 0x11, 0x12, 0xC1, 0x10, 0x0D,
      0xF0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x02, 0x00,
      0x60, 0x12, 0xC1, 0xF0, 0xC2, 0x61, 0x02, 0xC1, 0x5F, 0xF9, 0x02, 0x61, 0x03, 0x22, 0x2C, 0x04, 0x16,
      0xA2, 0x07, 0x45, 0xEB, 0xFF, 0x16, 0x42, 0x07, 0xC5, 0xEA, 0xFF, 0x16, 0x92, 0xFF, 0x21, 0xA8, 0xFF,
      0x31, 0xF4, 0xFF, 0xC0, 0x20, 0x00, 0x39, 0x02, 0xC0, 0x20, 0x00, 0x38, 0x02, 0x56, 0x73, 0xFF, 0x28,
      0x4C, 0x0C, 0xF3, 0x27, 0x23, 0x07, 0x0C, 0x12, 0x41, 0x4A, 0xF9, 0x06, 0x03, 0x00, 0x28, 0x2C, 0x20,
      0x20, 0x34, 0x56, 0xF2, 0xFE, 0x41, 0xEA, 0xFF, 0x1C, 0x02, 0x58, 0x2C, 0x61, 0x9A, 0xFF, 0x40, 0x55,
      0x11, 0xC0, 0x20, 0x00, 0x32, 0x26, 0x00, 0x30, 0x30, 0x24, 0x56, 0x33, 0xFF, 0x31, 0xE5, 0xFF, 0x30,
      0x55, 0x10, 0x31, 0xE5, 0xFF, 0xC0, 0x20, 0x00, 0x59, 0x03, 0x31, 0x94, 0xFF, 0xC0, 0x20, 0x00, 0x42,
      0x63, 0x00, 0xC0, 0x20, 0x00, 0x48, 0x03, 0x56, 0x74, 0xFF, 0x38, 0x4C, 0x20, 0x33, 0xC0, 0x39, 0x4C,
      0x38, 0x2C, 0x3A, 0x22, 0x29, 0x2C, 0x08, 0x31, 0xC8, 0x21, 0x12, 0xC1, 0x10, 0x0D, 0xF0, 0x00, 0x00,
      0x4C, 0x4A, 0x00, 0x40, 0x12, 0xC1, 0xE0, 0xC9, 0x61, 0xC1, 0x38, 0xF9, 0xD9, 0x51, 0x48, 0x3C, 0xE9,
      0x41, 0x09, 0x71, 0xF9, 0x31, 0xED, 0x02, 0xDD, 0x03, 0x37, 0xB4, 0x02, 0x40, 0xD4, 0x20, 0x16, 0x5D,
      0x04, 0xF8, 0x1C, 0xFA, 0xFD, 0xF0, 0xFC, 0x41, 0x86, 0x00, 0x00, 0x85, 0xF3, 0xFF, 0x28, 0x4C, 0xE6,
      0x12, 0x0A, 0x85, 0xDF, 0xFF, 0x16, 0x92, 0xFF, 0x86, 0x02, 0x00, 0x00, 0x00, 0x28, 0x2C, 0x27, 0xAF,
      0xE7, 0x06, 0xFB, 0xFF, 0x00, 0x28, 0x1C, 0x3D, 0x0E, 0x4D, 0x0D, 0x01, 0xEC, 0xFF, 0xC0, 0x00, 0x00,
      0x8C, 0x32, 0x22, 0xA0, 0xC4, 0x29, 0x5C, 0x28, 0x1C, 0x2A, 0x2D, 0x29, 0x1C, 0x28, 0x3C, 0xD0, 0xD2,
      0xC0, 0xD9, 0x3C, 0x08, 0x71, 0xC8, 0x61, 0xD8, 0x51, 0xE8, 0x41, 0xF8, 0x31, 0x12, 0xC1, 0x20, 0x0D,
      0xF0, 0xFF, 0x0F, 0x00, 0x00, 0x41, 0x1C, 0xF9, 0x12, 0xC1, 0xF0, 0x09, 0x31, 0xC9, 0x21, 0x0C, 0x15,
      0x52, 0x44, 0x00, 0x30, 0x5C, 0x41, 0x59, 0x24, 0x51, 0xFA, 0xFF, 0x39, 0x14, 0x29, 0x34, 0x30, 0x30,
      0xB4, 0x5A, 0x22, 0x3A, 0x22, 0x0C, 0x0C, 0x20, 0x2C, 0x41, 0xC9, 0x54, 0x29, 0x44, 0x01, 0x3C, 0xF9,
      0xC0, 0x00, 0x00, 0x08, 0x31, 0x3D, 0x02, 0x22, 0xA0, 0xC5, 0x30, 0x2C, 0x83, 0xC8, 0x21, 0x12, 0xC1,
      0x10, 0x0D, 0xF0, 0x00, 0x00, 0x12, 0xC1, 0xF0, 0x22, 0xA0, 0xDB, 0x09, 0x31, 0x01, 0x33, 0xF9, 0xC0,
      0x00, 0x00, 0x22, 0xA0, 0xDC, 0x01, 0x30, 0xF9, 0xC0, 0x00, 0x00, 0x08, 0x31, 0x12, 0xC1, 0x10, 0x0D,
      0xF0, 0x00, 0x00, 0x12, 0xC1, 0xF0, 0x09, 0x31, 0x32, 0xA0, 0xC0, 0x37, 0x92, 0x05, 0x45, 0xFD, 0xFF,
      0x06, 0x05, 0x00, 0x32, 0xA0, 0xDB, 0x37, 0x92, 0x08, 0x01, 0x27, 0xF9, 0xC0, 0x00, 0x00, 0x22, 0xA0,
      0xDD, 0x01, 0x25, 0xF9, 0xC0, 0x00, 0x00, 0x08, 0x31, 0x12, 0xC1, 0x10, 0x0D, 0xF0, 0x00, 0x00, 0x00,
      0x12, 0xC1, 0xF0, 0xC9, 0x21, 0xD9, 0x11, 0x09, 0x31, 0xCD, 0x02, 0x3A, 0xD2, 0xC6, 0x01, 0x00, 0x22,
      0x0C, 0x00, 0x1B, 0xCC, 0x85, 0xFB, 0xFF, 0xD7, 0x9C, 0xF4, 0x08, 0x31, 0xC8, 0x21, 0xD8, 0x11, 0x12,
      0xC1, 0x10, 0x0D, 0xF0, 0x00, 0x00, 0x12, 0xC1, 0xE0, 0xC9, 0x61, 0xCD, 0x02, 0x22, 0xA0, 0xC0, 0x09,
      0x71, 0x32, 0x61, 0x00, 0x01, 0x13, 0xF9, 0xC0, 0x00, 0x00, 0x38, 0x01, 0x2D, 0x0C, 0xC5, 0xFB, 0xFF,
      0x22, 0xA0, 0xC0, 0x01, 0x0F, 0xF9, 0xC0, 0x00, 0x00, 0x08, 0x71, 0xC8, 0x61, 0x12, 0xC1, 0x20, 0x0D,
      0xF0, 0x00, 0x00, 0x58, 0x10, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00, 0x70, 0x10, 0x00, 0x00, 0x74, 0x10,
      0x00, 0x00, 0x78, 0x10, 0x00, 0x00, 0x7C, 0x10, 0x00, 0x00, 0x80, 0x10, 0x00, 0x00, 0x90, 0x10, 0x00,
      0x00, 0x98, 0x0F, 0x00, 0x40, 0x18, 0x98, 0x00, 0x40, 0x1C, 0x4B, 0x00, 0x40, 0x34, 0x98, 0x00, 0x40,
      0x64, 0x3B, 0x00, 0x40, 0x00, 0x99, 0x00, 0x40, 0x91, 0xF9, 0xFF, 0x12, 0xC1, 0xE0, 0x61, 0xF2, 0xFF,
      0xC9, 0x61, 0xE9, 0x41, 0xF9, 0x31, 0x09, 0x71, 0xD9, 0x51, 0x90, 0x11, 0xC0, 0x1A, 0x66, 0x29, 0x06,
      0x21, 0xEE, 0xFF, 0xC2, 0xD1, 0x10, 0x1A, 0x22, 0x39, 0x02, 0x31, 0xED, 0xFF, 0x2C, 0x02, 0x1A, 0x33,
      0xF2, 0xA0, 0x00, 0xED, 0x04, 0x52, 0x63, 0x00, 0xF2, 0x6C, 0x1A, 0x01, 0xEC, 0xFF, 0xC0, 0x00, 0x00,
      0x21, 0xBE, 0xF8, 0xE7, 0xB2, 0x02, 0x86, 0x4C, 0x00, 0x2D, 0x0C, 0x01, 0xE9, 0xFF, 0xC0, 0x00, 0x00,
      0x21, 0xDE, 0xFF, 0x41, 0xE3, 0xFF, 0x2A, 0x51, 0x1A, 0x44, 0x59, 0x04, 0xC6, 0x3C, 0x00, 0x00, 0x61,
      0xDD, 0xFF, 0x1A, 0x66, 0x68, 0x06, 0xF0, 0xD6, 0xC0, 0xD7, 0xBE, 0x01, 0xDD, 0x0E, 0x31, 0xD9, 0xFF,
      0x51, 0xDC, 0xFF, 0x1A, 0x33, 0x28, 0x03, 0x1A, 0x55, 0x79, 0x05, 0x3D, 0x01, 0x4D, 0x0D, 0x01, 0xDC,
      0xFF, 0xC0, 0x00, 0x00, 0x61, 0xD7, 0xFF, 0x1A, 0x66, 0x78, 0x06, 0x8C, 0x62, 0x0C, 0x04, 0x42, 0x6C,
      0x16, 0xC6, 0x13, 0x00, 0x41, 0xD2, 0xFF, 0x2D, 0x01, 0x1A, 0x44, 0x79, 0x04, 0x3D, 0x0D, 0x45, 0xEF,
      0xFF, 0x2D, 0x0C, 0x3D, 0x01, 0x4D, 0x0D, 0x01, 0xD2, 0xFF, 0xC0, 0x00, 0x00, 0x51, 0xC8, 0xFF, 0xDA,
      0xFF, 0x1A, 0x55, 0x58, 0x05, 0xDA, 0x65, 0x51, 0xC5, 0xFF, 0x1A, 0x55, 0x69, 0x05, 0x61, 0xC7, 0xFF,
      0x1A, 0x66, 0x78, 0x06, 0x21, 0xC3, 0xFF, 0x1A, 0x22, 0x28, 0x02, 0x27, 0xBF, 0xBA, 0x31, 0xC1, 0xFF,
      0x70, 0x2F, 0xC0, 0x1A, 0x33, 0x38, 0x03, 0x37, 0xB2, 0x02, 0x86, 0xDE, 0xFF, 0xC6, 0xE9, 0xFF, 0x51,
      0xBE, 0xFF, 0x1A, 0x55, 0x42, 0x65, 0x00, 0x01, 0xC2, 0xFF, 0xC0, 0x00, 0x00, 0x61, 0xBA, 0xFF, 0x1A,
      0x66, 0x38, 0x06, 0x85, 0x11, 0x00, 0x51, 0xB8, 0xFF, 0x0C, 0x13, 0x1A, 0x55, 0x48, 0x05, 0xB6, 0x44,
      0x02, 0x32, 0xA0, 0x00, 0x7C, 0xF5, 0x20, 0x55, 0x30, 0x50, 0x5F, 0x04, 0x37, 0x05, 0x0E, 0x61, 0xAD,
      0xFF, 0x1A, 0x66, 0x4A, 0x36, 0x22, 0x43, 0x00, 0x1B, 0x44, 0x86, 0xEF, 0xFF, 0x7C, 0xE3, 0x37, 0x92,
      0xB9, 0x26, 0x44, 0x21, 0x21, 0xA6, 0xFF, 0x3D, 0x0C, 0x1A, 0x22, 0x01, 0xB1, 0xFF, 0xC0, 0x00, 0x00,
      0x21, 0xA3, 0xFF, 0x1C, 0x03, 0x1A, 0x22, 0x45, 0xE5, 0xFF, 0x2C, 0x02, 0x01, 0xA8, 0xF8, 0xC0, 0x00,
      0x00, 0xC6, 0x09, 0x00, 0x72, 0x2C, 0x1A, 0x32, 0xA0, 0x01, 0x77, 0xBF, 0x02, 0x32, 0xA0, 0x00, 0x41,
      0x9E, 0xFF, 0x0C, 0x12, 0x1A, 0x44, 0x42, 0x24, 0x00, 0x47, 0x37, 0x02, 0x22, 0xA0, 0x00, 0x20, 0x23,
      0x10, 0x07, 0x62, 0x02, 0x86, 0xD4, 0xFF, 0x46, 0xED, 0xFF, 0x91, 0x9B, 0xFF, 0x9A, 0x11, 0x08, 0x71,
      0xC8, 0x61, 0xD8, 0x51, 0xE8, 0x41, 0xF8, 0x31, 0x12, 0xC1, 0x20, 0x0D, 0xF0, 0x91, 0x91, 0xFF, 0x12,
      0xC1, 0xE0, 0xC9, 0x61, 0xE9, 0x41, 0xF9, 0x31, 0x09, 0x71, 0xD9, 0x51, 0x90, 0x11, 0xC0, 0xED, 0x02,
      0x22, 0xD1, 0x10, 0xCD, 0x03, 0x01, 0x91, 0xFF, 0xC0, 0x00, 0x00, 0xF1, 0x62, 0xF8, 0xC6, 0x09, 0x00,
      0xDD, 0x0C, 0xC7, 0xBF, 0x01, 0xDD, 0x0F, 0x2D, 0x0E, 0x3D, 0x01, 0x4D, 0x0D, 0x01, 0x8C, 0xFF, 0xC0,
      0x00, 0x00, 0xFC, 0x12, 0x22, 0xD1, 0x10, 0x3D, 0x01, 0xD0, 0x4D, 0x20, 0x01, 0x89, 0xFF, 0xC0, 0x00,
      0x00, 0xDA, 0xEE, 0xD0, 0xCC, 0xC0, 0x56, 0x4C, 0xFD, 0x21, 0x7A, 0xFF, 0x32, 0xD1, 0x10, 0x1A, 0x22,
      0x01, 0x85, 0xFF, 0xC0, 0x00, 0x00, 0x21, 0x77, 0xFF, 0x1C, 0x03, 0x1A, 0x22, 0xC5, 0xD7, 0xFF, 0x2D,
      0x0C, 0x86, 0x00, 0x00, 0x22, 0xA0, 0x63, 0x91, 0x74, 0xFF, 0x9A, 0x11, 0x08, 0x71, 0xC8, 0x61, 0xD8,
      0x51, 0xE8, 0x41, 0xF8, 0x31, 0x12, 0xC1, 0x20, 0x0D, 0xF0, 0x00, 0x00, 0x00, 0x52, 0xA0, 0xC0, 0x48,
      0x03, 0x57, 0x92, 0x0B, 0x0C, 0x12, 0x9C, 0x74, 0x0C, 0x02, 0x29, 0x03, 0x7C, 0xE2, 0x0D, 0xF0, 0x26,
      0x14, 0x05, 0x26, 0x24, 0x11, 0x86, 0x0B, 0x00, 0x42, 0xA0, 0xDB, 0x47, 0x92, 0x2A, 0x0C, 0x22, 0x29,
      0x03, 0x46, 0x08, 0x00, 0x00, 0x00, 0x42, 0xA0, 0xDC, 0x47, 0x92, 0x09, 0x0C, 0x12, 0x29, 0x03, 0x2D,
      0x05, 0x0D, 0xF0, 0x00, 0x00, 0x42, 0xA0, 0xDD, 0x47, 0x92, 0x09, 0x0C, 0x12, 0x29, 0x03, 0x22, 0xA0,
      0xDB, 0x0D, 0xF0, 0x00, 0x7C, 0xF2, 0x0D, 0xF0, ),
   data: Uint8Array.of(
      0xA4, 0x2B, 0xFF, 0x3F, 0x05, 0x05, 0x04, 0x00, 0x02, 0x03, 0x07, 0x00, 0x03, 0x03, 0x0B, 0x00, 0x4B,
      0xE6, 0x10, 0x40, 0x80, 0xE6, 0x10, 0x40, 0xC6, 0xE6, 0x10, 0x40, 0x87, 0xE7, 0x10, 0x40, 0xAD, 0xF6,
      0x10, 0x40, 0xDF, 0xE7, 0x10, 0x40, 0x30, 0xE8, 0x10, 0x40, 0x86, 0xE8, 0x10, 0x40, 0xAD, 0xF6, 0x10,
      0x40, 0x78, 0xE9, 0x10, 0x40, 0xF8, 0xE9, 0x10, 0x40, 0xB5, 0xEA, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40,
      0xAD, 0xF6, 0x10, 0x40, 0x53, 0xEB, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0x30, 0xEE, 0x10, 0x40, 0x0B,
      0xEF, 0x10, 0x40, 0x43, 0xEF, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xF1, 0xEF,
      0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xF0, 0xF0, 0x10, 0x40, 0x97, 0xF1, 0x10, 0x40, 0xFD, 0xF2, 0x10,
      0x40, 0xCF, 0xF3, 0x10, 0x40, 0xA8, 0xF4, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40,
      0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xD7, 0xF5, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0x9C,
      0xF6, 0x10, 0x40, 0x7B, 0xEC, 0x10, 0x40, 0x51, 0xE7, 0x10, 0x40, 0x1F, 0xF5, 0x10, 0x40, 0x9F, 0xE9,
      0x10, 0x40, 0xEE, 0xE8, 0x10, 0x40, 0x95, 0xE9, 0x10, 0x40, 0x2B, 0xF6, 0x10, 0x40, 0x74, 0xF6, 0x10,
      0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40,
      0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0xAD, 0xF6, 0x10, 0x40, 0x17,
      0xE9, 0x10, 0x40, 0x4D, 0xE9, 0x10, 0x40, 0x35, 0xF5, 0x10, 0x40, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00,
      0x00, 0x09, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
      0x21, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x81,
      0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x81, 0x01, 0x00, 0x00, 0x01, 0x02,
      0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x01, 0x08, 0x00,
      0x00, 0x01, 0x0C, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00,
      0x01, 0x30, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07,
      0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00,
      0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00,
      0x00, 0x0B, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
      0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00,
      0x00, 0x0F, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
      0x1B, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x33,
      0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x63, 0x00,
      0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0xA3, 0x00, 0x00, 0x00, 0xC3, 0x00, 0x00,
      0x00, 0xE3, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x12, 0x00, 0x08, 0x07, 0x09, 0x06, 0x0A, 0x05, 0x0B, 0x04,
      0x0C, 0x03, 0x0D, 0x02, 0x0E, 0x01, 0x0F, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,
      0x00, 0x00, 0x00, ),
}

const ESP32ROM = {
   text_start: 1074393088 ,
   data_start: 1073736612 ,
   entry: 1074394468 ,
   text: Uint8Array.of(
      0xF8, 0x20, 0xF4, 0x3F, 0xF8, 0x30, 0xF4, 0x3F, 0x36, 0x41, 0x00, 0x91, 0xFD, 0xFF, 0xC0, 0x20, 0x00,
      0x88, 0x09, 0x80, 0x80, 0x24, 0x56, 0x48, 0xFF, 0x91, 0xFA, 0xFF, 0xC0, 0x20, 0x00, 0x88, 0x09, 0x80,
      0x80, 0x24, 0x56, 0x48, 0xFF, 0x1D, 0xF0, 0x00, 0x00, 0x00, 0x10, 0x20, 0xF4, 0x3F, 0x00, 0x20, 0xF4,
      0x3F, 0x00, 0x00, 0x00, 0x08, 0x36, 0x41, 0x00, 0xE5, 0xFC, 0xFF, 0x81, 0xFB, 0xFF, 0x0C, 0x02, 0xC0,
      0x20, 0x00, 0x29, 0x08, 0x91, 0xFA, 0xFF, 0x21, 0xFA, 0xFF, 0xC0, 0x20, 0x00, 0x22, 0x69, 0x00, 0xC0,
      0x20, 0x00, 0x28, 0x09, 0x56, 0x72, 0xFF, 0xC0, 0x20, 0x00, 0x88, 0x08, 0x0C, 0x12, 0x80, 0x80, 0x04,
      0x20, 0x28, 0x30, 0x1D, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x36, 0x41, 0x00, 0x65, 0xFC, 0xFF, 0x16,
      0x9A, 0xFF, 0x81, 0xED, 0xFF, 0x91, 0xFC, 0xFF, 0xC0, 0x20, 0x00, 0x99, 0x08, 0xC0, 0x20, 0x00, 0x98,
      0x08, 0x56, 0x79, 0xFF, 0x1D, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x98,
      0xC0, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0x00, 0x04, 0x20, 0xF4, 0x3F, 0x36, 0x41, 0x00, 0x21, 0xFC, 0xFF,
      0x32, 0x22, 0x04, 0x16, 0x43, 0x05, 0x65, 0xF8, 0xFF, 0x16, 0xEA, 0x04, 0xA5, 0xFB, 0xFF, 0x58, 0x42,
      0x0C, 0xF8, 0x0C, 0x13, 0x41, 0xF4, 0xFF, 0x57, 0xA8, 0x0B, 0x58, 0x22, 0x80, 0x55, 0x10, 0xCC, 0x35,
      0x41, 0xF2, 0xFF, 0x1C, 0x03, 0x88, 0x22, 0x40, 0x58, 0x11, 0x25, 0xF3, 0xFF, 0x81, 0xF0, 0xFF, 0x80,
      0x85, 0x10, 0x51, 0xF0, 0xFF, 0xC0, 0x20, 0x00, 0x89, 0x05, 0x81, 0xD2, 0xFF, 0xC0, 0x20, 0x00, 0x42,
      0x68, 0x00, 0xC0, 0x20, 0x00, 0x48, 0x08, 0x56, 0x74, 0xFF, 0x88, 0x42, 0x48, 0x22, 0x30, 0x88, 0xC0,
      0x3A, 0x34, 0x89, 0x42, 0x39, 0x22, 0x1D, 0xF0, 0x00, 0x08, 0x00, 0xF4, 0x3F, 0x1C, 0x00, 0xF4, 0x3F,
      0x00, 0x00, 0xF4, 0x3F, 0x90, 0xC0, 0xFF, 0x3F, 0x08, 0x40, 0xFF, 0x3F, 0x80, 0x80, 0x00, 0x00, 0x84,
      0x80, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x48, 0x80, 0xFF, 0x3F, 0x10, 0x00, 0xF4, 0x3F, 0x94, 0xC0,
      0xFF, 0x3F, 0x36, 0x41, 0x00, 0x21, 0xF4, 0xFF, 0x31, 0xF7, 0xFF, 0x41, 0xF7, 0xFF, 0xC0, 0x20, 0x00,
      0x58, 0x02, 0x4A, 0x43, 0x61, 0xF1, 0xFF, 0xC0, 0x20, 0x00, 0x28, 0x06, 0x20, 0x20, 0x74, 0x16, 0xE2,
      0x09, 0xC6, 0x23, 0x00, 0x61, 0xEE, 0xFF, 0xB1, 0xEE, 0xFF, 0xC0, 0x20, 0x00, 0xA2, 0x26, 0x00, 0xA0,
      0xA0, 0x74, 0x25, 0xA8, 0x00, 0x96, 0xCA, 0x04, 0x91, 0xEA, 0xFF, 0x81, 0xEB, 0xFF, 0xB1, 0xEB, 0xFF,
      0x80, 0x89, 0x80, 0xB0, 0xB9, 0x80, 0xC0, 0x20, 0x00, 0xC8, 0x08, 0x92, 0x1B, 0x00, 0xA0, 0xA0, 0x74,
      0x90, 0x80, 0xF4, 0x1B, 0x98, 0x90, 0x90, 0xF4, 0xC0, 0x20, 0x00, 0x92, 0x5B, 0x00, 0x8A, 0x8C, 0xC0,
      0x20, 0x00, 0xA2, 0x48, 0x00, 0x82, 0x1B, 0x00, 0x91, 0xE1, 0xFF, 0x80, 0x80, 0xF4, 0x97, 0x98, 0x3E,
      0xC0, 0x20, 0x00, 0xA8, 0x04, 0x81, 0xE0, 0xFF, 0x91, 0xDD, 0xFF, 0x37, 0x9A, 0x19, 0x46, 0x02, 0x00,
      0x7C, 0xE8, 0x87, 0x1A, 0xE9, 0x46, 0x09, 0x00, 0x00, 0x00, 0xC0, 0x20, 0x00, 0x39, 0x08, 0xC0, 0x20,
      0x00, 0x99, 0x04, 0x46, 0x02, 0x00, 0xC0, 0x20, 0x00, 0x99, 0x08, 0xC0, 0x20, 0x00, 0x39, 0x04, 0x81,
      0xD1, 0xFF, 0x0C, 0x09, 0x8A, 0x83, 0xC0, 0x20, 0x00, 0x92, 0x58, 0x00, 0x0B, 0x22, 0x26, 0x02, 0x02,
      0xC6, 0xD9, 0xFF, 0xC6, 0xD4, 0xFF, 0x00, 0x21, 0xCE, 0xFF, 0xC0, 0x20, 0x00, 0x59, 0x02, 0x1D, 0xF0,
      0x00, 0x00, 0x50, 0x2D, 0x06, 0x40, 0x36, 0x41, 0x00, 0x41, 0xA4, 0xFF, 0x58, 0x34, 0x30, 0x35, 0x63,
      0x16, 0xE3, 0x03, 0x58, 0x14, 0x5A, 0x53, 0x50, 0x5C, 0x41, 0x86, 0x00, 0x00, 0x65, 0xE8, 0xFF, 0x88,
      0x44, 0xA6, 0x18, 0x04, 0x88, 0x24, 0x87, 0xA5, 0xF2, 0xE5, 0xE0, 0xFF, 0x16, 0x9A, 0xFF, 0xA8, 0x14,
      0x30, 0xC3, 0x20, 0x20, 0xB2, 0x20, 0x81, 0xF2, 0xFF, 0xE0, 0x08, 0x00, 0x8C, 0x3A, 0x22, 0xA0, 0xC4,
      0x29, 0x54, 0x58, 0x14, 0x3A, 0x55, 0x59, 0x14, 0x58, 0x34, 0x30, 0x35, 0xC0, 0x39, 0x34, 0x1D, 0xF0,
      0x00, 0x08, 0x20, 0xF4, 0x3F, 0x00, 0x00, 0x40, 0x00, 0x70, 0xE2, 0xFA, 0x3F, 0x48, 0x24, 0x06, 0x40,
      0xF0, 0x22, 0x06, 0x40, 0x36, 0x61, 0x00, 0xE5, 0xD9, 0xFF, 0xAD, 0x01, 0x81, 0xFC, 0xFF, 0xE0, 0x08,
      0x00, 0x3D, 0x0A, 0x0C, 0x12, 0xEC, 0xEA, 0x98, 0x01, 0x82, 0xA2, 0x00, 0x80, 0x89, 0x10, 0x89, 0x01,
      0xA5, 0xDE, 0xFF, 0x91, 0xF2, 0xFF, 0x81, 0xF3, 0xFF, 0xC0, 0x20, 0x00, 0xA8, 0x09, 0x80, 0x8A, 0x20,
      0xC0, 0x20, 0x00, 0x82, 0x69, 0x00, 0xB2, 0x21, 0x00, 0xA1, 0xEF, 0xFF, 0x81, 0xF0, 0xFF, 0xE0, 0x08,
      0x00, 0xA0, 0x23, 0x83, 0x1D, 0xF0, 0x00, 0x00, 0xFF, 0x0F, 0x00, 0x00, 0x36, 0x41, 0x00, 0xA1, 0x78,
      0xFF, 0x91, 0xFD, 0xFF, 0x82, 0xA0, 0x01, 0x82, 0x4A, 0x00, 0x32, 0x6A, 0x01, 0x30, 0x8C, 0x41, 0x22,
      0x6A, 0x03, 0x30, 0x30, 0xB4, 0x9A, 0x22, 0x89, 0x2A, 0x2A, 0x83, 0x80, 0x8C, 0x41, 0x0C, 0x02, 0x89,
      0x4A, 0x29, 0x5A, 0xA5, 0xF8, 0xFF, 0x2D, 0x0A, 0x32, 0xA0, 0xC5, 0xA0, 0x23, 0x93, 0x1D, 0xF0, 0x00,
      0x2C, 0x92, 0x00, 0x40, 0x36, 0x41, 0x00, 0x82, 0xA0, 0xC0, 0xAD, 0x02, 0x87, 0x92, 0x0E, 0xA2, 0xA0,
      0xDB, 0x81, 0xFB, 0xFF, 0xE0, 0x08, 0x00, 0xA2, 0xA0, 0xDC, 0x86, 0x03, 0x00, 0x82, 0xA0, 0xDB, 0x87,
      0x92, 0x08, 0x81, 0xF7, 0xFF, 0xE0, 0x08, 0x00, 0xA2, 0xA0, 0xDD, 0x81, 0xF4, 0xFF, 0xE0, 0x08, 0x00,
      0x1D, 0xF0, 0x00, 0x00, 0x00, 0x36, 0x41, 0x00, 0x3A, 0x32, 0x06, 0x02, 0x00, 0x00, 0xA2, 0x02, 0x00,
      0x1B, 0x22, 0xE5, 0xFB, 0xFF, 0x37, 0x92, 0xF4, 0x1D, 0xF0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x58,
      0x10, 0x00, 0x00, 0x7C, 0xDA, 0x05, 0x40, 0xD8, 0x2E, 0x06, 0x40, 0x9C, 0xDA, 0x05, 0x40, 0x1C, 0xDB,
      0x05, 0x40, 0x36, 0x21, 0x21, 0xA2, 0xD1, 0x10, 0x81, 0xFA, 0xFF, 0xE0, 0x08, 0x00, 0x86, 0x09, 0x00,
      0x00, 0x51, 0xF6, 0xFF, 0xBD, 0x01, 0x50, 0x43, 0x63, 0xCD, 0x04, 0xAD, 0x02, 0x81, 0xF6, 0xFF, 0xE0,
      0x08, 0x00, 0xEC, 0xFA, 0xCD, 0x04, 0xBD, 0x01, 0xA2, 0xD1, 0x10, 0x81, 0xF3, 0xFF, 0xE0, 0x08, 0x00,
      0x4A, 0x22, 0x40, 0x33, 0xC0, 0x56, 0x63, 0xFD, 0xA1, 0xEC, 0xFF, 0xB2, 0xD1, 0x10, 0x1A, 0xAA, 0x81,
      0xEE, 0xFF, 0xE0, 0x08, 0x00, 0xA1, 0xE9, 0xFF, 0x1C, 0x0B, 0x1A, 0xAA, 0x25, 0xF8, 0xFF, 0x2D, 0x03,
      0x1D, 0xF0, 0x22, 0xA0, 0x63, 0x1D, 0xF0, 0x00, 0x00, 0x36, 0x41, 0x00, 0xA2, 0xA0, 0xC0, 0x81, 0xCD,
      0xFF, 0xE0, 0x08, 0x00, 0x1D, 0xF0, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00, 0x70, 0x10, 0x00, 0x00, 0x74,
      0x10, 0x00, 0x00, 0x78, 0x10, 0x00, 0x00, 0xFC, 0x67, 0x00, 0x40, 0xA4, 0x92, 0x00, 0x40, 0x08, 0x68,
      0x00, 0x40, 0x36, 0x41, 0x21, 0x61, 0xF9, 0xFF, 0x81, 0xF9, 0xFF, 0x1A, 0x66, 0x1A, 0x88, 0x49, 0x06,
      0x72, 0xD1, 0x10, 0x0C, 0x06, 0x2C, 0x0A, 0x59, 0x08, 0x62, 0x67, 0x1A, 0x81, 0xF6, 0xFF, 0xE0, 0x08,
      0x00, 0x81, 0xCF, 0xFF, 0x47, 0xB8, 0x02, 0x46, 0x36, 0x00, 0xAD, 0x07, 0x81, 0xCF, 0xFF, 0xE0, 0x08,
      0x00, 0x4D, 0x06, 0x51, 0xEF, 0xFF, 0x61, 0xCB, 0xFF, 0x1A, 0x55, 0x6A, 0x81, 0x89, 0x05, 0x06, 0x2D,
      0x00, 0x00, 0x81, 0xE9, 0xFF, 0x40, 0x63, 0xC0, 0x1A, 0x88, 0x88, 0x08, 0xBD, 0x01, 0x60, 0x68, 0x63,
      0xCD, 0x06, 0x20, 0xA2, 0x20, 0x81, 0xC5, 0xFF, 0xE0, 0x08, 0x00, 0x8C, 0xEA, 0x91, 0xE1, 0xFF, 0x0C,
      0x05, 0x52, 0x67, 0x16, 0x6D, 0x05, 0x9A, 0x51, 0x46, 0x0D, 0x00, 0x00, 0x25, 0xF6, 0xFF, 0x60, 0xB6,
      0x20, 0xAD, 0x01, 0xE5, 0xEC, 0xFF, 0xA5, 0xF5, 0xFF, 0xCD, 0x06, 0x10, 0xB1, 0x20, 0x70, 0xA7, 0x20,
      0x81, 0xBA, 0xFF, 0xE0, 0x08, 0x00, 0x6A, 0x22, 0x6A, 0x44, 0x37, 0xB4, 0xCC, 0x81, 0xD6, 0xFF, 0x50,
      0x64, 0xC0, 0x1A, 0x88, 0x88, 0x08, 0x87, 0x36, 0xA3, 0x06, 0xEF, 0xFF, 0x00, 0x00, 0x81, 0xD4, 0xFF,
      0xE0, 0x08, 0x00, 0x81, 0xD1, 0xFF, 0x10, 0x88, 0x80, 0xB2, 0x28, 0x00, 0x65, 0x75, 0x00, 0xF7, 0xEA,
      0x0D, 0xF6, 0x46, 0x0A, 0x60, 0xB5, 0x80, 0xA2, 0x4B, 0x00, 0x1B, 0x66, 0x06, 0xF7, 0xFF, 0x7C, 0xEB,
      0xB7, 0x9A, 0xD7, 0x26, 0x46, 0x27, 0xA1, 0xA5, 0xFF, 0x70, 0xB7, 0x20, 0x1A, 0xAA, 0x81, 0xA7, 0xFF,
      0xE0, 0x08, 0x00, 0x65, 0xEF, 0xFF, 0xA1, 0xA0, 0xFF, 0x1C, 0x0B, 0x1A, 0xAA, 0xE5, 0xE5, 0xFF, 0xA5,
      0xEE, 0xFF, 0x2C, 0x0A, 0x81, 0xC3, 0xFF, 0xE0, 0x08, 0x00, 0x1D, 0xF0, 0x52, 0x27, 0x1A, 0x37, 0xB5,
      0xD1, 0x57, 0xB4, 0x8E, 0xC6, 0xF2, 0xFF, 0x1D, 0xF0, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0x3F, 0x4F, 0x48,
      0x41, 0x49, 0xA4, 0xEB, 0xFF, 0x3F, 0x34, 0xF1, 0x09, 0x40, 0x0C, 0x00, 0xF4, 0x3F, 0x38, 0x40, 0xF4,
      0x3F, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x8C, 0x80, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00,
      0x00, 0x40, 0x00, 0x00, 0x00, 0xC0, 0xFE, 0x3F, 0x04, 0xC0, 0xFE, 0x3F, 0x10, 0x27, 0x00, 0x00, 0x14,
      0x00, 0xF4, 0x3F, 0xFF, 0xFF, 0x0F, 0x00, 0xA4, 0xEB, 0xFF, 0x3F, 0x08, 0xC0, 0xFE, 0x3F, 0xB0, 0xC0,
      0xFF, 0x3F, 0x7C, 0x68, 0x00, 0x40, 0xEC, 0x67, 0x00, 0x40, 0x58, 0x86, 0x00, 0x40, 0x6C, 0x2A, 0x06,
      0x40, 0x38, 0x32, 0x06, 0x40, 0xCC, 0x2C, 0x06, 0x40, 0x4C, 0x2C, 0x06, 0x40, 0x34, 0x85, 0x00, 0x40,
      0xCC, 0x90, 0x00, 0x40, 0x30, 0xEF, 0x05, 0x40, 0x58, 0x92, 0x00, 0x40, 0x4C, 0x82, 0x00, 0x40, 0x14,
      0x2C, 0x06, 0x40, 0x36, 0xC1, 0x00, 0x21, 0xE0, 0xFF, 0x0C, 0x0A, 0x22, 0x61, 0x08, 0x42, 0xA0, 0x00,
      0x81, 0xEF, 0xFF, 0xE0, 0x08, 0x00, 0x21, 0xDB, 0xFF, 0x31, 0xDC, 0xFF, 0x06, 0x01, 0x00, 0x42, 0x62,
      0x00, 0x4B, 0x22, 0x37, 0x32, 0xF7, 0x65, 0xE2, 0xFF, 0x0C, 0x4B, 0xA2, 0xC1, 0x20, 0x25, 0xD9, 0xFF,
      0xA5, 0xE1, 0xFF, 0x41, 0xE0, 0xFE, 0x21, 0xE0, 0xFE, 0xB1, 0xD4, 0xFF, 0x0C, 0x0C, 0x2A, 0x24, 0x0C,
      0x5A, 0xC0, 0x20, 0x00, 0x49, 0x02, 0x81, 0xE2, 0xFF, 0xE0, 0x08, 0x00, 0x31, 0xD0, 0xFF, 0x22, 0xA1,
      0x01, 0xC0, 0x20, 0x00, 0x58, 0x03, 0x2C, 0x0A, 0x20, 0x25, 0x20, 0xC0, 0x20, 0x00, 0x29, 0x03, 0x81,
      0x84, 0xFF, 0xE0, 0x08, 0x00, 0x81, 0xDB, 0xFF, 0xE0, 0x08, 0x00, 0x21, 0xC9, 0xFF, 0xC0, 0x20, 0x00,
      0x38, 0x02, 0xCC, 0xBA, 0x1C, 0xC2, 0x20, 0x23, 0x10, 0x22, 0xC2, 0xF8, 0x0C, 0x13, 0x20, 0xA3, 0x83,
      0x0C, 0x0B, 0x81, 0xD4, 0xFF, 0xE0, 0x08, 0x00, 0xF1, 0xC2, 0xFF, 0xD1, 0x52, 0xFF, 0xC1, 0xC2, 0xFF,
      0xB1, 0xA5, 0xFE, 0xE2, 0xA1, 0x00, 0x0C, 0x0A, 0x81, 0xCF, 0xFF, 0xE0, 0x08, 0x00, 0x31, 0xA4, 0xFE,
      0x52, 0xD3, 0x2B, 0x41, 0xC2, 0xFE, 0x61, 0xBC, 0xFF, 0x6A, 0x24, 0xC0, 0x20, 0x00, 0x68, 0x02, 0x16,
      0x76, 0xFF, 0xC0, 0x20, 0x00, 0x78, 0x02, 0x0C, 0x06, 0xC0, 0x20, 0x00, 0x69, 0x02, 0x0C, 0x12, 0x22,
      0x41, 0x10, 0x22, 0x07, 0x01, 0x0C, 0x28, 0x22, 0x41, 0x11, 0x82, 0x51, 0x09, 0x69, 0x51, 0x26, 0x92,
      0x08, 0x1C, 0x36, 0x67, 0x12, 0x1F, 0x46, 0x08, 0x00, 0x00, 0x22, 0x07, 0x03, 0x62, 0x07, 0x02, 0x80,
      0x22, 0x11, 0x60, 0x22, 0x20, 0x66, 0x42, 0x11, 0x28, 0x27, 0xC0, 0x20, 0x00, 0x28, 0x02, 0x29, 0x51,
      0x46, 0x01, 0x00, 0x00, 0x1C, 0x22, 0x22, 0x51, 0x09, 0x65, 0xD4, 0xFF, 0x0C, 0x8B, 0xA2, 0xC1, 0x10,
      0x25, 0xCB, 0xFF, 0x22, 0x07, 0x03, 0x82, 0x07, 0x02, 0x80, 0x22, 0x11, 0x80, 0x82, 0x20, 0x21, 0xA2,
      0xFF, 0x87, 0xB2, 0x11, 0xA2, 0xA0, 0xC0, 0x65, 0xC6, 0xFF, 0xA2, 0xA0, 0xEE, 0x25, 0xC6, 0xFF, 0xE5,
      0xD1, 0xFF, 0x46, 0xDD, 0xFF, 0x62, 0x07, 0x01, 0x0C, 0xD2, 0x27, 0x96, 0x02, 0x06, 0x91, 0x00, 0x67,
      0x32, 0x4E, 0x66, 0x66, 0x02, 0xC6, 0xAF, 0x00, 0xF6, 0x76, 0x20, 0x66, 0x36, 0x02, 0xC6, 0x65, 0x00,
      0xF6, 0x46, 0x08, 0x66, 0x26, 0x02, 0xC6, 0x4B, 0x00, 0x46, 0xAE, 0x00, 0x66, 0x46, 0x02, 0x06, 0x7B,
      0x00, 0x66, 0x56, 0x02, 0x86, 0x8E, 0x00, 0x86, 0xAA, 0x00, 0x0C, 0x92, 0x27, 0x96, 0x02, 0x06, 0x86,
      0x00, 0x67, 0x32, 0x08, 0x66, 0x76, 0x02, 0xC6, 0x8B, 0x00, 0x86, 0xA5, 0x00, 0x66, 0x96, 0x02, 0xC6,
      0x83, 0x00, 0x0C, 0xB2, 0x27, 0x96, 0x02, 0x46, 0x79, 0x00, 0x46, 0xA1, 0x00, 0x1C, 0x32, 0x27, 0x96,
      0x02, 0xC6, 0x39, 0x00, 0x67, 0x32, 0x28, 0x66, 0xB6, 0x02, 0xC6, 0x43, 0x00, 0x1C, 0x02, 0x67, 0x32,
      0x0A, 0x0C, 0xF2, 0x27, 0x96, 0x02, 0x06, 0x2E, 0x00, 0x06, 0x99, 0x00, 0x1C, 0x12, 0x27, 0x96, 0x02,
      0x86, 0x4B, 0x00, 0x1C, 0x22, 0x27, 0x96, 0x02, 0x46, 0x63, 0x00, 0x46, 0x94, 0x00, 0x22, 0xA0, 0xD1,
      0x27, 0x16, 0x2D, 0x67, 0x32, 0x09, 0x22, 0xA0, 0xD0, 0x27, 0x16, 0x18, 0xC6, 0x8F, 0x00, 0x00, 0x22,
      0xA0, 0xD2, 0x27, 0x96, 0x02, 0x86, 0x25, 0x00, 0x22, 0xA0, 0xD3, 0x27, 0x96, 0x02, 0x46, 0x25, 0x01,
      0x46, 0x8A, 0x00, 0x0C, 0x12, 0x16, 0x18, 0x3E, 0xAD, 0x02, 0x2D, 0x0A, 0x86, 0x85, 0x00, 0x26, 0x88,
      0x02, 0x86, 0x83, 0x00, 0xC6, 0xF8, 0x00, 0x00, 0x00, 0xE5, 0xAF, 0xFF, 0x60, 0x46, 0x20, 0x60, 0x22,
      0x80, 0x16, 0x2A, 0x01, 0x86, 0x7E, 0x00, 0x00, 0xA0, 0xAC, 0x41, 0x81, 0x72, 0xFF, 0xE0, 0x08, 0x00,
      0x56, 0xDA, 0x1E, 0x42, 0xD4, 0xF0, 0x40, 0xA2, 0xC0, 0xCC, 0x24, 0x86, 0x01, 0x01, 0x00, 0xA0, 0x60,
      0xF4, 0x56, 0x16, 0xFE, 0x61, 0x5A, 0xFF, 0x86, 0x03, 0x00, 0xA0, 0xA0, 0xF5, 0x81, 0x6A, 0xFF, 0xE0,
      0x08, 0x00, 0x56, 0x9A, 0x1C, 0x60, 0x44, 0xC0, 0x40, 0xA2, 0xC0, 0x47, 0x36, 0xEA, 0x86, 0x03, 0x00,
      0xA0, 0xAC, 0x41, 0x81, 0x63, 0xFF, 0xE0, 0x08, 0x00, 0x56, 0x1A, 0x1B, 0x42, 0xD4, 0xF0, 0x40, 0xA2,
      0xC0, 0x56, 0xA4, 0xFE, 0x46, 0xF2, 0x00, 0x0C, 0x06, 0x22, 0xA0, 0xC0, 0x26, 0x88, 0x02, 0x46, 0x6A,
      0x00, 0x86, 0xF2, 0x00, 0x00, 0x00, 0x66, 0xB8, 0x02, 0x86, 0xF0, 0x00, 0x86, 0x46, 0x00, 0x66, 0xB8,
      0x02, 0x86, 0xDB, 0x00, 0xC6, 0x60, 0x00, 0x22, 0xA0, 0x01, 0x26, 0xB8, 0x02, 0x06, 0x5F, 0x00, 0x92,
      0x27, 0x04, 0x81, 0x44, 0xFF, 0x62, 0xA0, 0x00, 0x22, 0xA0, 0xC2, 0x87, 0x19, 0x02, 0xC6, 0x5D, 0x00,
      0xB8, 0x57, 0xA8, 0x27, 0x65, 0xAA, 0xFF, 0xC6, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x14, 0x66, 0xB8,
      0x2C, 0xA8, 0x47, 0x81, 0x3B, 0xFF, 0x0C, 0x06, 0x22, 0xA0, 0xC2, 0x87, 0x1A, 0x02, 0x46, 0x55, 0x00,
      0x88, 0x37, 0xB8, 0x57, 0xA8, 0x27, 0x20, 0x88, 0x11, 0x89, 0xC1, 0xE5, 0xA7, 0xFF, 0x21, 0x17, 0xFE,
      0x88, 0xC1, 0x69, 0x62, 0x22, 0xD2, 0x2B, 0x89, 0x22, 0xA0, 0x46, 0x83, 0x2D, 0x04, 0x86, 0x49, 0x00,
      0x91, 0x12, 0xFE, 0x0C, 0x06, 0xA2, 0x09, 0x00, 0x22, 0xA0, 0xC6, 0x67, 0x9A, 0x02, 0x86, 0x48, 0x00,
      0x68, 0x27, 0x28, 0x59, 0x82, 0xC8, 0xF0, 0x80, 0x66, 0xC0, 0x92, 0xA0, 0xC0, 0x60, 0x29, 0x93, 0x62,
      0xC7, 0x18, 0x9D, 0x06, 0xB2, 0xA0, 0xEF, 0xC6, 0x01, 0x00, 0xA2, 0x09, 0x00, 0x1B, 0x99, 0xA0, 0xBB,
      0x30, 0x60, 0xA9, 0xC0, 0x87, 0x2A, 0xF1, 0x82, 0x07, 0x05, 0xA2, 0x07, 0x04, 0x62, 0x07, 0x06, 0x80,
      0x88, 0x11, 0xA0, 0x98, 0x20, 0x00, 0x66, 0x11, 0x90, 0x86, 0x20, 0x62, 0x07, 0x07, 0x92, 0xA0, 0xC1,
      0x80, 0x66, 0x01, 0x80, 0x66, 0x20, 0x60, 0x8B, 0xC0, 0x80, 0x29, 0x93, 0x0C, 0x06, 0x46, 0x33, 0x00,
      0x00, 0x81, 0xF9, 0xFD, 0x0C, 0x06, 0x92, 0x08, 0x00, 0x22, 0xA0, 0xC6, 0x67, 0x99, 0x02, 0xC6, 0x2E,
      0x00, 0x98, 0x38, 0x22, 0xA0, 0xC8, 0x67, 0x19, 0x02, 0x06, 0x2C, 0x00, 0x62, 0x48, 0x00, 0x28, 0x58,
      0x06, 0x2A, 0x00, 0x1C, 0x82, 0x27, 0x98, 0x02, 0x46, 0xA3, 0x00, 0x0C, 0x06, 0x0C, 0x12, 0x46, 0x26,
      0x00, 0x00, 0x66, 0x48, 0x02, 0x46, 0xA7, 0x00, 0x06, 0x20, 0x00, 0x66, 0xB8, 0x02, 0x06, 0xA9, 0x00,
      0x46, 0x01, 0x00, 0x66, 0x48, 0x02, 0x06, 0xA9, 0x00, 0x0C, 0x06, 0x22, 0xA0, 0xC0, 0x06, 0x1E, 0x00,
      0x66, 0xB8, 0x02, 0x46, 0xA7, 0x00, 0x06, 0x18, 0x00, 0xC1, 0xFF, 0xFE, 0x0C, 0x06, 0xA8, 0x0C, 0x0C,
      0x12, 0x82, 0xC8, 0xF0, 0x9D, 0x06, 0x80, 0x92, 0x93, 0xA0, 0x26, 0x93, 0x20, 0x99, 0x10, 0x22, 0xA0,
      0xC6, 0x67, 0x99, 0x52, 0xB1, 0xF9, 0xFE, 0x6D, 0x09, 0xD8, 0x0B, 0x22, 0xA0, 0xC9, 0x87, 0x3D, 0x45,
      0x80, 0xE0, 0x14, 0x0C, 0x06, 0x22, 0xA0, 0xC0, 0x67, 0x9E, 0x3A, 0x62, 0xC7, 0x18, 0x2D, 0x0E, 0xC6,
      0x02, 0x00, 0x2A, 0x96, 0x98, 0x09, 0x4B, 0x22, 0x99, 0x0A, 0x4B, 0xAA, 0x0C, 0x19, 0x20, 0xED, 0xC0,
      0x87, 0x32, 0xED, 0x16, 0x19, 0x24, 0xA9, 0x0C, 0xE9, 0x0B, 0x86, 0x8E, 0x00, 0x00, 0x00, 0x66, 0x88,
      0x02, 0x86, 0x92, 0x00, 0x0C, 0x12, 0x0C, 0x06, 0xC6, 0x01, 0x00, 0x00, 0x00, 0x62, 0xA0, 0x00, 0x22,
      0xA0, 0xFF, 0x20, 0xA0, 0x74, 0xA5, 0x96, 0xFF, 0x60, 0xA0, 0x74, 0x65, 0x96, 0xFF, 0x25, 0xA2, 0xFF,
      0x56, 0xA2, 0xC7, 0x62, 0x07, 0x01, 0x0C, 0xF8, 0x87, 0x16, 0x31, 0x67, 0x38, 0x15, 0x66, 0x46, 0x02,
      0x06, 0x56, 0x00, 0x66, 0x66, 0x02, 0xC6, 0x5B, 0x00, 0x26, 0x36, 0x02, 0x46, 0x17, 0xFF, 0x06, 0x1B,
      0x00, 0x00, 0x1C, 0x22, 0x27, 0x96, 0x02, 0x06, 0x50, 0x00, 0x22, 0xA0, 0xD2, 0x27, 0x16, 0x4B, 0x1C,
      0x12, 0x27, 0x16, 0x02, 0xC6, 0x10, 0xFF, 0x46, 0x1B, 0x00, 0xA1, 0xD2, 0xFE, 0x81, 0xDF, 0xFE, 0xE0,
      0x08, 0x00, 0x61, 0xD1, 0xFE, 0x81, 0xD1, 0xFE, 0xC0, 0x20, 0x00, 0x68, 0x06, 0xB8, 0x37, 0x80, 0x86,
      0x10, 0xC0, 0x88, 0x11, 0x60, 0x64, 0x35, 0x80, 0x66, 0x80, 0xB0, 0x66, 0x82, 0xB8, 0x27, 0x20, 0xA2,
      0x20, 0xB0, 0xB6, 0xC2, 0x81, 0xD5, 0xFE, 0xE0, 0x08, 0x00, 0xA2, 0xA3, 0xE8, 0x81, 0xD2, 0xFE, 0xE0,
      0x08, 0x00, 0x46, 0x00, 0xFF, 0x00, 0x00, 0xD2, 0x27, 0x05, 0xC2, 0x27, 0x04, 0xB2, 0x27, 0x03, 0xA8,
      0x27, 0x25, 0x9C, 0xFF, 0x86, 0xFB, 0xFE, 0x00, 0xB2, 0x07, 0x03, 0x22, 0x07, 0x02, 0x80, 0xBB, 0x11,
      0x20, 0xBB, 0x20, 0xB2, 0xCB, 0xF0, 0xA2, 0xC7, 0x18, 0x25, 0x7D, 0xFF, 0x46, 0xF5, 0xFE, 0x00, 0x00,
      0x00, 0x62, 0x07, 0x03, 0x82, 0x07, 0x02, 0x80, 0x66, 0x11, 0x80, 0x66, 0x20, 0x22, 0xC7, 0x18, 0x62,
      0xC6, 0xF0, 0x0C, 0x19, 0x86, 0x1D, 0x00, 0x41, 0xB4, 0xFE, 0x71, 0xB0, 0xFD, 0xE8, 0x04, 0x69, 0x71,
      0xE0, 0x77, 0xC0, 0x79, 0x61, 0x78, 0x25, 0x0C, 0x39, 0x77, 0x36, 0x02, 0x92, 0xA0, 0x01, 0x99, 0xD1,
      0xE9, 0xC1, 0x65, 0x63, 0xFF, 0x98, 0xD1, 0x71, 0xAD, 0xFE, 0xE8, 0xC1, 0xA1, 0xAC, 0xFE, 0xBD, 0x02,
      0x99, 0x01, 0xF2, 0xC1, 0x18, 0xDD, 0x07, 0xC2, 0xC1, 0x1C, 0x81, 0xB3, 0xFE, 0xE0, 0x08, 0x00, 0x9D,
      0x0A, 0xB8, 0x25, 0xA8, 0x71, 0xA0, 0xBB, 0xC0, 0xB9, 0x25, 0xA0, 0x66, 0xC0, 0xB8, 0x04, 0xAA, 0x22,
      0xA8, 0x61, 0xAA, 0xBB, 0x0B, 0xA9, 0xA0, 0xA9, 0x20, 0xB9, 0x04, 0xA0, 0xAF, 0x05, 0x70, 0xBB, 0xC0,
      0xCC, 0x9A, 0xC2, 0xDB, 0x80, 0x0C, 0x1D, 0xC0, 0xAD, 0x83, 0x16, 0xAA, 0x00, 0xAD, 0x07, 0x99, 0xD1,
      0x25, 0x74, 0xFF, 0x98, 0xD1, 0x79, 0x04, 0x8C, 0xB6, 0x78, 0x33, 0x8C, 0x77, 0x90, 0x7F, 0x31, 0x90,
      0x77, 0xC0, 0x96, 0x97, 0xF7, 0xD6, 0x89, 0x00, 0x22, 0xA0, 0xC7, 0x29, 0x53, 0x06, 0x3E, 0x00, 0x00,
      0x56, 0x49, 0x0F, 0x28, 0x33, 0x16, 0x12, 0xB2, 0x22, 0xA0, 0xC8, 0x06, 0x01, 0x00, 0x00, 0x00, 0x22,
      0xA0, 0xC9, 0x29, 0x53, 0x46, 0xC4, 0xFE, 0x00, 0xA8, 0x27, 0x56, 0xBA, 0xB0, 0x81, 0x95, 0xFE, 0xE0,
      0x08, 0x00, 0xA1, 0x84, 0xFE, 0x81, 0x90, 0xFE, 0xE0, 0x08, 0x00, 0x81, 0x92, 0xFE, 0xE0, 0x08, 0x00,
      0xC6, 0xBC, 0xFE, 0x68, 0x37, 0x16, 0xE6, 0xAE, 0x20, 0xA2, 0x20, 0x81, 0x8D, 0xFE, 0xE0, 0x08, 0x00,
      0xA2, 0xA3, 0xE8, 0x81, 0x88, 0xFE, 0xE0, 0x08, 0x00, 0xE0, 0x06, 0x00, 0x86, 0xB5, 0xFE, 0x00, 0x89,
      0xC1, 0x81, 0x89, 0xFE, 0xE0, 0x08, 0x00, 0x88, 0xC1, 0xA0, 0x82, 0x93, 0xAD, 0x08, 0x46, 0x03, 0xFF,
      0x28, 0x27, 0x68, 0x37, 0x60, 0x82, 0x20, 0x80, 0x80, 0xB4, 0x16, 0x08, 0xC1, 0xC6, 0x85, 0xFF, 0xB2,
      0x27, 0x03, 0xA2, 0x27, 0x02, 0x25, 0x7F, 0xFF, 0x22, 0xA0, 0x00, 0x0C, 0x16, 0xA0, 0x26, 0x93, 0x46,
      0x81, 0xFF, 0xF8, 0x77, 0xE8, 0x67, 0xD8, 0x57, 0xC8, 0x47, 0xB8, 0x37, 0xA8, 0x27, 0x0C, 0x12, 0x81,
      0x71, 0xFE, 0xE0, 0x08, 0x00, 0x6D, 0x0A, 0x0C, 0x0A, 0x60, 0x2A, 0x83, 0x06, 0x7D, 0xFF, 0xA8, 0x27,
      0x0C, 0x0B, 0x81, 0x6B, 0xFE, 0xE0, 0x08, 0x00, 0x0C, 0x02, 0x06, 0x76, 0xFF, 0x00, 0x28, 0x27, 0x68,
      0x37, 0xC0, 0x20, 0x00, 0x69, 0x02, 0x0C, 0x06, 0x2D, 0x06, 0x06, 0x75, 0xFF, 0x21, 0x59, 0xFE, 0x88,
      0x57, 0x68, 0x27, 0x89, 0x02, 0x21, 0x57, 0xFE, 0x69, 0x02, 0x06, 0xF6, 0xFF, 0x91, 0x55, 0xFE, 0x0C,
      0x08, 0x68, 0x09, 0x22, 0xA0, 0xC8, 0x60, 0x28, 0x83, 0x6D, 0x02, 0x21, 0x51, 0xFE, 0x89, 0x09, 0x89,
      0x02, 0x0C, 0x12, 0x60, 0x28, 0x83, 0x06, 0x66, 0xFF, 0x00, 0x28, 0x33, 0x16, 0x22, 0xF1, 0x46, 0x8A,
      0xFE, 0x1D, 0xF0, 0x00, 0x00, 0x36, 0x41, 0x00, 0x9D, 0x02, 0x82, 0xA0, 0xC0, 0x28, 0x03, 0x87, 0x99,
      0x0E, 0xCC, 0x32, 0x0C, 0x12, 0xC6, 0x06, 0x00, 0x0C, 0x02, 0x29, 0x03, 0x7C, 0xE2, 0x1D, 0xF0, 0x26,
      0x12, 0x05, 0x26, 0x22, 0x12, 0x06, 0x0C, 0x00, 0x82, 0xA0, 0xDB, 0x80, 0x29, 0x23, 0x87, 0x99, 0x29,
      0x0C, 0x22, 0x29, 0x03, 0x06, 0x08, 0x00, 0x22, 0xA0, 0xDC, 0x27, 0x99, 0x08, 0x0C, 0x12, 0x29, 0x03,
      0x2D, 0x08, 0x1D, 0xF0, 0x00, 0x82, 0xA0, 0xDD, 0x7C, 0xF2, 0x87, 0x99, 0x0B, 0x0C, 0x12, 0x29, 0x03,
      0x22, 0xA0, 0xDB, 0x1D, 0xF0, 0x00, 0x7C, 0xF2, 0x1D, 0xF0, 0x00, 0x00, ),
   data: Uint8Array.of(
      0x08, 0xC0, 0xFE, 0x3F, ),
}

export default EspTool;
