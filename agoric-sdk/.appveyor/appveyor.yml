# build+test under WSL (Windows Subsystem for Linux)
#
# WSL uses a Linux-ish kernel (apparently with modifications to talk to the
# real windows kernel underneath). The Appveyor installation, at least,
# defaults to an Ubuntu 18.04 "Bionic" userspace image, with a handful of
# tools installed (but not build-essential).

# The $PATH includes a bunch of windows directories, with things like Node.js
# (version 8), yarn, Python, ruby, etc. None of which we use; I don't think
# they're part of the normal WSL user's experience.

# Commands added here as " - ps:" are run under PowerShell. Commands which
# are run as " - ps: wsl -- XYZ" get run in a bash environment by the wsl
# tool. In this environment, the exit code of XYZ is ignored (so failing
# programs don't stop the build), but the build will halt with a failure if
# anything is printed to stderr. We use the "./no-stderr" script to make this
# behave more normally. The docs
# (https://www.appveyor.com/docs/build-configuration/#interpreters-and-scripts)
# suggest that putting `$ErrorActionPreference = "Stop";` at "the top of your
# script" (i.e. your PowerShell script) might influence this.

image: Visual Studio 2019
build: off

# the worker clones the repo into the clone folder
# (/mnt/c/projects/agoric-sdk), cds there, then runs each of the following
# steps. Each step is run from /mnt/c/projects/agoric-sdk, even if it uses
# 'cd' internally (i.e. each step is run in a separate shell).
install:
  - ps: wsl -- .appveyor/no-stderr .appveyor/install-go.sh
  - ps: wsl -- .appveyor/no-stderr .appveyor/install-nvm.sh
  - ps: wsl -- .appveyor/no-stderr .appveyor/install-node-13.sh
  - ps: wsl -- .appveyor/no-stderr .appveyor/install-yarn.sh
  - ps: wsl -- .appveyor/no-stderr .appveyor/install-build-tools.sh

build_script:
  - ps: wsl -- .appveyor/no-stderr .appveyor/build.sh

test_script:
  - ps: wsl -- .appveyor/no-stderr .appveyor/test.sh
